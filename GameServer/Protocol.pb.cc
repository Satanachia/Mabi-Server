// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#include "Protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protocol {
PROTOBUF_CONSTEXPR C_LOGIN::C_LOGIN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.login_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.login_pw_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sign_up_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_LOGINDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_LOGINDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_LOGINDefaultTypeInternal() {}
  union {
    C_LOGIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_LOGINDefaultTypeInternal _C_LOGIN_default_instance_;
PROTOBUF_CONSTEXPR S_LOGIN::S_LOGIN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_LOGINDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_LOGINDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_LOGINDefaultTypeInternal() {}
  union {
    S_LOGIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_LOGINDefaultTypeInternal _S_LOGIN_default_instance_;
PROTOBUF_CONSTEXPR C_CREATE_NEW_PLAYER::C_CREATE_NEW_PLAYER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_CREATE_NEW_PLAYERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_CREATE_NEW_PLAYERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_CREATE_NEW_PLAYERDefaultTypeInternal() {}
  union {
    C_CREATE_NEW_PLAYER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_CREATE_NEW_PLAYERDefaultTypeInternal _C_CREATE_NEW_PLAYER_default_instance_;
PROTOBUF_CONSTEXPR C_ENTER_GAME::C_ENTER_GAME(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerindex_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_ENTER_GAMEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_ENTER_GAMEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_ENTER_GAMEDefaultTypeInternal() {}
  union {
    C_ENTER_GAME _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_ENTER_GAMEDefaultTypeInternal _C_ENTER_GAME_default_instance_;
PROTOBUF_CONSTEXPR S_ENTER_GAME::S_ENTER_GAME(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_ENTER_GAMEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ENTER_GAMEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ENTER_GAMEDefaultTypeInternal() {}
  union {
    S_ENTER_GAME _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ENTER_GAMEDefaultTypeInternal _S_ENTER_GAME_default_instance_;
PROTOBUF_CONSTEXPR C_LEAVE_GAME::C_LEAVE_GAME(
    ::_pbi::ConstantInitialized) {}
struct C_LEAVE_GAMEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_LEAVE_GAMEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_LEAVE_GAMEDefaultTypeInternal() {}
  union {
    C_LEAVE_GAME _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_LEAVE_GAMEDefaultTypeInternal _C_LEAVE_GAME_default_instance_;
PROTOBUF_CONSTEXPR S_LEAVE_GAME::S_LEAVE_GAME(
    ::_pbi::ConstantInitialized) {}
struct S_LEAVE_GAMEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_LEAVE_GAMEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_LEAVE_GAMEDefaultTypeInternal() {}
  union {
    S_LEAVE_GAME _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_LEAVE_GAMEDefaultTypeInternal _S_LEAVE_GAME_default_instance_;
PROTOBUF_CONSTEXPR S_SPAWN::S_SPAWN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.positions_)*/{}
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_SPAWNDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_SPAWNDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_SPAWNDefaultTypeInternal() {}
  union {
    S_SPAWN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_SPAWNDefaultTypeInternal _S_SPAWN_default_instance_;
PROTOBUF_CONSTEXPR S_DESPAWN::S_DESPAWN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_ids_)*/{}
  , /*decltype(_impl_._object_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_DESPAWNDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_DESPAWNDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_DESPAWNDefaultTypeInternal() {}
  union {
    S_DESPAWN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_DESPAWNDefaultTypeInternal _S_DESPAWN_default_instance_;
PROTOBUF_CONSTEXPR C_CHANGE_LEVEL::C_CHANGE_LEVEL(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.spawn_pos_)*/nullptr
  , /*decltype(_impl_.next_level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_CHANGE_LEVELDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_CHANGE_LEVELDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_CHANGE_LEVELDefaultTypeInternal() {}
  union {
    C_CHANGE_LEVEL _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_CHANGE_LEVELDefaultTypeInternal _C_CHANGE_LEVEL_default_instance_;
PROTOBUF_CONSTEXPR C_MOVE::C_MOVE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.current_pos_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_MOVEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_MOVEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_MOVEDefaultTypeInternal() {}
  union {
    C_MOVE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_MOVEDefaultTypeInternal _C_MOVE_default_instance_;
PROTOBUF_CONSTEXPR S_MOVE::S_MOVE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.current_pos_)*/nullptr
  , /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_MOVEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_MOVEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_MOVEDefaultTypeInternal() {}
  union {
    S_MOVE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_MOVEDefaultTypeInternal _S_MOVE_default_instance_;
PROTOBUF_CONSTEXPR C_LOOK::C_LOOK(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.look_pos_)*/nullptr
  , /*decltype(_impl_.yaw_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_LOOKDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_LOOKDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_LOOKDefaultTypeInternal() {}
  union {
    C_LOOK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_LOOKDefaultTypeInternal _C_LOOK_default_instance_;
PROTOBUF_CONSTEXPR S_LOOK::S_LOOK(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.look_pos_)*/nullptr
  , /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.look_target_)*/uint64_t{0u}
  , /*decltype(_impl_.yaw_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_LOOKDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_LOOKDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_LOOKDefaultTypeInternal() {}
  union {
    S_LOOK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_LOOKDefaultTypeInternal _S_LOOK_default_instance_;
PROTOBUF_CONSTEXPR C_ANIMATION::C_ANIMATION(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ani_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_ANIMATIONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_ANIMATIONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_ANIMATIONDefaultTypeInternal() {}
  union {
    C_ANIMATION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_ANIMATIONDefaultTypeInternal _C_ANIMATION_default_instance_;
PROTOBUF_CONSTEXPR S_ANIMATION::S_ANIMATION(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.ani_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_ANIMATIONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ANIMATIONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ANIMATIONDefaultTypeInternal() {}
  union {
    S_ANIMATION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ANIMATIONDefaultTypeInternal _S_ANIMATION_default_instance_;
PROTOBUF_CONSTEXPR C_ATTACK::C_ATTACK(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.target_pos_)*/nullptr
  , /*decltype(_impl_.target_id_)*/uint64_t{0u}
  , /*decltype(_impl_.attack_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_ATTACKDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_ATTACKDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_ATTACKDefaultTypeInternal() {}
  union {
    C_ATTACK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_ATTACKDefaultTypeInternal _C_ATTACK_default_instance_;
PROTOBUF_CONSTEXPR S_ATTACK::S_ATTACK(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.victim_id_)*/uint64_t{0u}
  , /*decltype(_impl_.hp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_ATTACKDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ATTACKDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ATTACKDefaultTypeInternal() {}
  union {
    S_ATTACK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ATTACKDefaultTypeInternal _S_ATTACK_default_instance_;
PROTOBUF_CONSTEXPR C_THINK::C_THINK(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attack_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_THINKDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_THINKDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_THINKDefaultTypeInternal() {}
  union {
    C_THINK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_THINKDefaultTypeInternal _C_THINK_default_instance_;
PROTOBUF_CONSTEXPR S_THINK::S_THINK(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.attack_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_THINKDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_THINKDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_THINKDefaultTypeInternal() {}
  union {
    S_THINK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_THINKDefaultTypeInternal _S_THINK_default_instance_;
PROTOBUF_CONSTEXPR S_THINK_DONE::S_THINK_DONE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.attack_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_THINK_DONEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_THINK_DONEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_THINK_DONEDefaultTypeInternal() {}
  union {
    S_THINK_DONE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_THINK_DONEDefaultTypeInternal _S_THINK_DONE_default_instance_;
PROTOBUF_CONSTEXPR C_SPAWN_PARTICLE::C_SPAWN_PARTICLE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.yaw_)*/0
  , /*decltype(_impl_.particle_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_SPAWN_PARTICLEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_SPAWN_PARTICLEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_SPAWN_PARTICLEDefaultTypeInternal() {}
  union {
    C_SPAWN_PARTICLE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_SPAWN_PARTICLEDefaultTypeInternal _C_SPAWN_PARTICLE_default_instance_;
PROTOBUF_CONSTEXPR S_SPAWN_PARTICLE::S_SPAWN_PARTICLE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.yaw_)*/0
  , /*decltype(_impl_.particle_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_SPAWN_PARTICLEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_SPAWN_PARTICLEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_SPAWN_PARTICLEDefaultTypeInternal() {}
  union {
    S_SPAWN_PARTICLE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_SPAWN_PARTICLEDefaultTypeInternal _S_SPAWN_PARTICLE_default_instance_;
PROTOBUF_CONSTEXPR S_INIT_INVENTORY::S_INIT_INVENTORY(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_INIT_INVENTORYDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_INIT_INVENTORYDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_INIT_INVENTORYDefaultTypeInternal() {}
  union {
    S_INIT_INVENTORY _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_INIT_INVENTORYDefaultTypeInternal _S_INIT_INVENTORY_default_instance_;
PROTOBUF_CONSTEXPR C_DROP_ITEM::C_DROP_ITEM(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_DROP_ITEMDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_DROP_ITEMDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_DROP_ITEMDefaultTypeInternal() {}
  union {
    C_DROP_ITEM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_DROP_ITEMDefaultTypeInternal _C_DROP_ITEM_default_instance_;
PROTOBUF_CONSTEXPR C_ADD_ITEM::C_ADD_ITEM(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_ADD_ITEMDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_ADD_ITEMDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_ADD_ITEMDefaultTypeInternal() {}
  union {
    C_ADD_ITEM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_ADD_ITEMDefaultTypeInternal _C_ADD_ITEM_default_instance_;
PROTOBUF_CONSTEXPR S_ADD_ITEM::S_ADD_ITEM(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_ADD_ITEMDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ADD_ITEMDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ADD_ITEMDefaultTypeInternal() {}
  union {
    S_ADD_ITEM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ADD_ITEMDefaultTypeInternal _S_ADD_ITEM_default_instance_;
PROTOBUF_CONSTEXPR C_USE_ITEM::C_USE_ITEM(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_USE_ITEMDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_USE_ITEMDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_USE_ITEMDefaultTypeInternal() {}
  union {
    C_USE_ITEM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_USE_ITEMDefaultTypeInternal _C_USE_ITEM_default_instance_;
PROTOBUF_CONSTEXPR S_USE_ITEM::S_USE_ITEM(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/uint64_t{0u}
  , /*decltype(_impl_.hp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_USE_ITEMDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_USE_ITEMDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_USE_ITEMDefaultTypeInternal() {}
  union {
    S_USE_ITEM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_USE_ITEMDefaultTypeInternal _S_USE_ITEM_default_instance_;
PROTOBUF_CONSTEXPR C_PING::C_PING(
    ::_pbi::ConstantInitialized) {}
struct C_PINGDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_PINGDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_PINGDefaultTypeInternal() {}
  union {
    C_PING _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_PINGDefaultTypeInternal _C_PING_default_instance_;
PROTOBUF_CONSTEXPR S_PONG::S_PONG(
    ::_pbi::ConstantInitialized) {}
struct S_PONGDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_PONGDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_PONGDefaultTypeInternal() {}
  union {
    S_PONG _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_PONGDefaultTypeInternal _S_PONG_default_instance_;
PROTOBUF_CONSTEXPR C_CHAT::C_CHAT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_CHATDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_CHATDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_CHATDefaultTypeInternal() {}
  union {
    C_CHAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_CHATDefaultTypeInternal _C_CHAT_default_instance_;
PROTOBUF_CONSTEXPR S_CHAT::S_CHAT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.playerid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_CHATDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_CHATDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_CHATDefaultTypeInternal() {}
  union {
    S_CHAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_CHATDefaultTypeInternal _S_CHAT_default_instance_;
}  // namespace Protocol
static ::_pb::Metadata file_level_metadata_Protocol_2eproto[33];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Protocol_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Protocol_2eproto = nullptr;

const uint32_t TableStruct_Protocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LOGIN, _impl_.login_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LOGIN, _impl_.login_pw_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LOGIN, _impl_.sign_up_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGIN, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGIN, _impl_.players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CREATE_NEW_PLAYER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CREATE_NEW_PLAYER, _impl_.player_name_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CREATE_NEW_PLAYER, _impl_.player_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ENTER_GAME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ENTER_GAME, _impl_.playerindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_GAME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_GAME, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_GAME, _impl_.player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LEAVE_GAME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LEAVE_GAME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SPAWN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SPAWN, _impl_.players_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SPAWN, _impl_.positions_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SPAWN, _impl_.level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DESPAWN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DESPAWN, _impl_.object_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CHANGE_LEVEL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CHANGE_LEVEL, _impl_.next_level_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CHANGE_LEVEL, _impl_.spawn_pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MOVE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MOVE, _impl_.current_pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MOVE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MOVE, _impl_.current_pos_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MOVE, _impl_.object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LOOK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LOOK, _impl_.look_pos_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LOOK, _impl_.yaw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOOK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOOK, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOOK, _impl_.look_target_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOOK, _impl_.look_pos_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOOK, _impl_.yaw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ANIMATION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ANIMATION, _impl_.ani_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ANIMATION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ANIMATION, _impl_.ani_type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ANIMATION, _impl_.object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ATTACK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ATTACK, _impl_.target_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ATTACK, _impl_.target_pos_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ATTACK, _impl_.attack_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ATTACK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ATTACK, _impl_.victim_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ATTACK, _impl_.hp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_THINK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_THINK, _impl_.attack_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_THINK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_THINK, _impl_.attack_type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_THINK, _impl_.object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_THINK_DONE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_THINK_DONE, _impl_.attack_type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_THINK_DONE, _impl_.object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SPAWN_PARTICLE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SPAWN_PARTICLE, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SPAWN_PARTICLE, _impl_.yaw_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SPAWN_PARTICLE, _impl_.particle_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SPAWN_PARTICLE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SPAWN_PARTICLE, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SPAWN_PARTICLE, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SPAWN_PARTICLE, _impl_.yaw_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SPAWN_PARTICLE, _impl_.particle_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_INIT_INVENTORY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_INIT_INVENTORY, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DROP_ITEM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_DROP_ITEM, _impl_.item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ADD_ITEM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ADD_ITEM, _impl_.item_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ADD_ITEM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ADD_ITEM, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_USE_ITEM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_USE_ITEM, _impl_.item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_USE_ITEM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_USE_ITEM, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_USE_ITEM, _impl_.hp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PING, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PONG, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CHAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CHAT, _impl_.msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHAT, _impl_.msg_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHAT, _impl_.playerid_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Protocol::C_LOGIN)},
  { 9, -1, -1, sizeof(::Protocol::S_LOGIN)},
  { 17, -1, -1, sizeof(::Protocol::C_CREATE_NEW_PLAYER)},
  { 25, -1, -1, sizeof(::Protocol::C_ENTER_GAME)},
  { 32, -1, -1, sizeof(::Protocol::S_ENTER_GAME)},
  { 40, -1, -1, sizeof(::Protocol::C_LEAVE_GAME)},
  { 46, -1, -1, sizeof(::Protocol::S_LEAVE_GAME)},
  { 52, -1, -1, sizeof(::Protocol::S_SPAWN)},
  { 61, -1, -1, sizeof(::Protocol::S_DESPAWN)},
  { 68, -1, -1, sizeof(::Protocol::C_CHANGE_LEVEL)},
  { 76, -1, -1, sizeof(::Protocol::C_MOVE)},
  { 83, -1, -1, sizeof(::Protocol::S_MOVE)},
  { 91, -1, -1, sizeof(::Protocol::C_LOOK)},
  { 99, -1, -1, sizeof(::Protocol::S_LOOK)},
  { 109, -1, -1, sizeof(::Protocol::C_ANIMATION)},
  { 116, -1, -1, sizeof(::Protocol::S_ANIMATION)},
  { 124, -1, -1, sizeof(::Protocol::C_ATTACK)},
  { 133, -1, -1, sizeof(::Protocol::S_ATTACK)},
  { 141, -1, -1, sizeof(::Protocol::C_THINK)},
  { 148, -1, -1, sizeof(::Protocol::S_THINK)},
  { 156, -1, -1, sizeof(::Protocol::S_THINK_DONE)},
  { 164, -1, -1, sizeof(::Protocol::C_SPAWN_PARTICLE)},
  { 173, -1, -1, sizeof(::Protocol::S_SPAWN_PARTICLE)},
  { 183, -1, -1, sizeof(::Protocol::S_INIT_INVENTORY)},
  { 190, -1, -1, sizeof(::Protocol::C_DROP_ITEM)},
  { 197, -1, -1, sizeof(::Protocol::C_ADD_ITEM)},
  { 204, -1, -1, sizeof(::Protocol::S_ADD_ITEM)},
  { 211, -1, -1, sizeof(::Protocol::C_USE_ITEM)},
  { 218, -1, -1, sizeof(::Protocol::S_USE_ITEM)},
  { 226, -1, -1, sizeof(::Protocol::C_PING)},
  { 232, -1, -1, sizeof(::Protocol::S_PONG)},
  { 238, -1, -1, sizeof(::Protocol::C_CHAT)},
  { 245, -1, -1, sizeof(::Protocol::S_CHAT)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Protocol::_C_LOGIN_default_instance_._instance,
  &::Protocol::_S_LOGIN_default_instance_._instance,
  &::Protocol::_C_CREATE_NEW_PLAYER_default_instance_._instance,
  &::Protocol::_C_ENTER_GAME_default_instance_._instance,
  &::Protocol::_S_ENTER_GAME_default_instance_._instance,
  &::Protocol::_C_LEAVE_GAME_default_instance_._instance,
  &::Protocol::_S_LEAVE_GAME_default_instance_._instance,
  &::Protocol::_S_SPAWN_default_instance_._instance,
  &::Protocol::_S_DESPAWN_default_instance_._instance,
  &::Protocol::_C_CHANGE_LEVEL_default_instance_._instance,
  &::Protocol::_C_MOVE_default_instance_._instance,
  &::Protocol::_S_MOVE_default_instance_._instance,
  &::Protocol::_C_LOOK_default_instance_._instance,
  &::Protocol::_S_LOOK_default_instance_._instance,
  &::Protocol::_C_ANIMATION_default_instance_._instance,
  &::Protocol::_S_ANIMATION_default_instance_._instance,
  &::Protocol::_C_ATTACK_default_instance_._instance,
  &::Protocol::_S_ATTACK_default_instance_._instance,
  &::Protocol::_C_THINK_default_instance_._instance,
  &::Protocol::_S_THINK_default_instance_._instance,
  &::Protocol::_S_THINK_DONE_default_instance_._instance,
  &::Protocol::_C_SPAWN_PARTICLE_default_instance_._instance,
  &::Protocol::_S_SPAWN_PARTICLE_default_instance_._instance,
  &::Protocol::_S_INIT_INVENTORY_default_instance_._instance,
  &::Protocol::_C_DROP_ITEM_default_instance_._instance,
  &::Protocol::_C_ADD_ITEM_default_instance_._instance,
  &::Protocol::_S_ADD_ITEM_default_instance_._instance,
  &::Protocol::_C_USE_ITEM_default_instance_._instance,
  &::Protocol::_S_USE_ITEM_default_instance_._instance,
  &::Protocol::_C_PING_default_instance_._instance,
  &::Protocol::_S_PONG_default_instance_._instance,
  &::Protocol::_C_CHAT_default_instance_._instance,
  &::Protocol::_S_CHAT_default_instance_._instance,
};

const char descriptor_table_protodef_Protocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Protocol.proto\022\010Protocol\032\nEnum.proto\032\014"
  "Struct.proto\">\n\007C_LOGIN\022\020\n\010login_id\030\001 \001("
  "\t\022\020\n\010login_pw\030\002 \001(\t\022\017\n\007sign_up\030\003 \001(\010\"A\n\007"
  "S_LOGIN\022\017\n\007success\030\001 \001(\010\022%\n\007players\030\002 \003("
  "\0132\024.Protocol.ObjectInfo\"W\n\023C_CREATE_NEW_"
  "PLAYER\022\023\n\013player_name\030\001 \001(\t\022+\n\013player_ty"
  "pe\030\002 \001(\0162\026.Protocol.CreatureType\"#\n\014C_EN"
  "TER_GAME\022\023\n\013playerIndex\030\001 \001(\005\"E\n\014S_ENTER"
  "_GAME\022\017\n\007success\030\001 \001(\010\022$\n\006player\030\002 \001(\0132\024"
  ".Protocol.ObjectInfo\"\016\n\014C_LEAVE_GAME\"\016\n\014"
  "S_LEAVE_GAME\"z\n\007S_SPAWN\022%\n\007players\030\001 \003(\013"
  "2\024.Protocol.ObjectInfo\022$\n\tpositions\030\002 \003("
  "\0132\021.Protocol.PosInfo\022\"\n\005level\030\003 \001(\0162\023.Pr"
  "otocol.LevelType\"\037\n\tS_DESPAWN\022\022\n\nobject_"
  "ids\030\001 \003(\004\"_\n\016C_CHANGE_LEVEL\022\'\n\nnext_leve"
  "l\030\001 \001(\0162\023.Protocol.LevelType\022$\n\tspawn_po"
  "s\030\002 \001(\0132\021.Protocol.PosInfo\"0\n\006C_MOVE\022&\n\013"
  "current_pos\030\001 \001(\0132\021.Protocol.PosInfo\"C\n\006"
  "S_MOVE\022&\n\013current_pos\030\001 \001(\0132\021.Protocol.P"
  "osInfo\022\021\n\tobject_id\030\002 \001(\004\":\n\006C_LOOK\022#\n\010l"
  "ook_pos\030\001 \001(\0132\021.Protocol.PosInfo\022\013\n\003yaw\030"
  "\002 \001(\002\"b\n\006S_LOOK\022\021\n\tobject_id\030\001 \001(\004\022\023\n\013lo"
  "ok_target\030\002 \001(\004\022#\n\010look_pos\030\003 \001(\0132\021.Prot"
  "ocol.PosInfo\022\013\n\003yaw\030\004 \001(\002\"8\n\013C_ANIMATION"
  "\022)\n\010ani_type\030\001 \001(\0162\027.Protocol.AnimationT"
  "ype\"K\n\013S_ANIMATION\022)\n\010ani_type\030\001 \001(\0162\027.P"
  "rotocol.AnimationType\022\021\n\tobject_id\030\002 \001(\004"
  "\"o\n\010C_ATTACK\022\021\n\ttarget_id\030\001 \001(\004\022%\n\ntarge"
  "t_pos\030\002 \001(\0132\021.Protocol.PosInfo\022)\n\013attack"
  "_type\030\003 \001(\0162\024.Protocol.AttackType\")\n\010S_A"
  "TTACK\022\021\n\tvictim_id\030\001 \001(\004\022\n\n\002hp\030\002 \001(\005\"4\n\007"
  "C_THINK\022)\n\013attack_type\030\001 \001(\0162\024.Protocol."
  "AttackType\"G\n\007S_THINK\022)\n\013attack_type\030\001 \001"
  "(\0162\024.Protocol.AttackType\022\021\n\tobject_id\030\002 "
  "\001(\004\"L\n\014S_THINK_DONE\022)\n\013attack_type\030\001 \001(\016"
  "2\024.Protocol.AttackType\022\021\n\tobject_id\030\002 \001("
  "\004\"s\n\020C_SPAWN_PARTICLE\022#\n\010position\030\001 \001(\0132"
  "\021.Protocol.PosInfo\022\013\n\003yaw\030\002 \001(\002\022-\n\rparti"
  "cle_type\030\003 \001(\0162\026.Protocol.ParticleType\"\227"
  "\001\n\020S_SPAWN_PARTICLE\022\"\n\005level\030\001 \001(\0162\023.Pro"
  "tocol.LevelType\022#\n\010position\030\002 \001(\0132\021.Prot"
  "ocol.PosInfo\022\013\n\003yaw\030\003 \001(\002\022-\n\rparticle_ty"
  "pe\030\004 \001(\0162\026.Protocol.ParticleType\"5\n\020S_IN"
  "IT_INVENTORY\022!\n\005items\030\001 \003(\0132\022.Protocol.I"
  "temInfo\"/\n\013C_DROP_ITEM\022 \n\004item\030\001 \001(\0132\022.P"
  "rotocol.ItemInfo\"\035\n\nC_ADD_ITEM\022\017\n\007item_i"
  "d\030\001 \001(\004\"/\n\nS_ADD_ITEM\022!\n\005items\030\001 \003(\0132\022.P"
  "rotocol.ItemInfo\".\n\nC_USE_ITEM\022 \n\004item\030\001"
  " \001(\0162\022.Protocol.ItemType\"+\n\nS_USE_ITEM\022\021"
  "\n\tobject_id\030\001 \001(\004\022\n\n\002hp\030\002 \001(\005\"\010\n\006C_PING\""
  "\010\n\006S_PONG\"\025\n\006C_CHAT\022\013\n\003msg\030\001 \001(\t\"\'\n\006S_CH"
  "AT\022\013\n\003msg\030\001 \001(\t\022\020\n\010playerId\030\002 \001(\004b\006proto"
  "3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Protocol_2eproto_deps[2] = {
  &::descriptor_table_Enum_2eproto,
  &::descriptor_table_Struct_2eproto,
};
static ::_pbi::once_flag descriptor_table_Protocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Protocol_2eproto = {
    false, false, 2081, descriptor_table_protodef_Protocol_2eproto,
    "Protocol.proto",
    &descriptor_table_Protocol_2eproto_once, descriptor_table_Protocol_2eproto_deps, 2, 33,
    schemas, file_default_instances, TableStruct_Protocol_2eproto::offsets,
    file_level_metadata_Protocol_2eproto, file_level_enum_descriptors_Protocol_2eproto,
    file_level_service_descriptors_Protocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Protocol_2eproto_getter() {
  return &descriptor_table_Protocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Protocol_2eproto(&descriptor_table_Protocol_2eproto);
namespace Protocol {

// ===================================================================

class C_LOGIN::_Internal {
 public:
};

C_LOGIN::C_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_LOGIN)
}
C_LOGIN::C_LOGIN(const C_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_LOGIN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.login_id_){}
    , decltype(_impl_.login_pw_){}
    , decltype(_impl_.sign_up_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.login_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_login_id().empty()) {
    _this->_impl_.login_id_.Set(from._internal_login_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.login_pw_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_pw_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_login_pw().empty()) {
    _this->_impl_.login_pw_.Set(from._internal_login_pw(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.sign_up_ = from._impl_.sign_up_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_LOGIN)
}

inline void C_LOGIN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.login_id_){}
    , decltype(_impl_.login_pw_){}
    , decltype(_impl_.sign_up_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.login_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.login_pw_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_pw_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_LOGIN::~C_LOGIN() {
  // @@protoc_insertion_point(destructor:Protocol.C_LOGIN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_LOGIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.login_id_.Destroy();
  _impl_.login_pw_.Destroy();
}

void C_LOGIN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_LOGIN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.login_id_.ClearToEmpty();
  _impl_.login_pw_.ClearToEmpty();
  _impl_.sign_up_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_LOGIN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string login_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_login_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_LOGIN.login_id"));
        } else
          goto handle_unusual;
        continue;
      // string login_pw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_login_pw();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_LOGIN.login_pw"));
        } else
          goto handle_unusual;
        continue;
      // bool sign_up = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.sign_up_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_LOGIN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_LOGIN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string login_id = 1;
  if (!this->_internal_login_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_login_id().data(), static_cast<int>(this->_internal_login_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_LOGIN.login_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_login_id(), target);
  }

  // string login_pw = 2;
  if (!this->_internal_login_pw().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_login_pw().data(), static_cast<int>(this->_internal_login_pw().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_LOGIN.login_pw");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_login_pw(), target);
  }

  // bool sign_up = 3;
  if (this->_internal_sign_up() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_sign_up(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_LOGIN)
  return target;
}

size_t C_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_LOGIN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string login_id = 1;
  if (!this->_internal_login_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_login_id());
  }

  // string login_pw = 2;
  if (!this->_internal_login_pw().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_login_pw());
  }

  // bool sign_up = 3;
  if (this->_internal_sign_up() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_LOGIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_LOGIN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_LOGIN::GetClassData() const { return &_class_data_; }


void C_LOGIN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_LOGIN*>(&to_msg);
  auto& from = static_cast<const C_LOGIN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_LOGIN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_login_id().empty()) {
    _this->_internal_set_login_id(from._internal_login_id());
  }
  if (!from._internal_login_pw().empty()) {
    _this->_internal_set_login_pw(from._internal_login_pw());
  }
  if (from._internal_sign_up() != 0) {
    _this->_internal_set_sign_up(from._internal_sign_up());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_LOGIN::CopyFrom(const C_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_LOGIN::IsInitialized() const {
  return true;
}

void C_LOGIN::InternalSwap(C_LOGIN* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.login_id_, lhs_arena,
      &other->_impl_.login_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.login_pw_, lhs_arena,
      &other->_impl_.login_pw_, rhs_arena
  );
  swap(_impl_.sign_up_, other->_impl_.sign_up_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_LOGIN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[0]);
}

// ===================================================================

class S_LOGIN::_Internal {
 public:
};

void S_LOGIN::clear_players() {
  _impl_.players_.Clear();
}
S_LOGIN::S_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_LOGIN)
}
S_LOGIN::S_LOGIN(const S_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_LOGIN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_LOGIN)
}

inline void S_LOGIN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){arena}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_LOGIN::~S_LOGIN() {
  // @@protoc_insertion_point(destructor:Protocol.S_LOGIN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_LOGIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
}

void S_LOGIN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_LOGIN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_LOGIN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Protocol.ObjectInfo players = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_LOGIN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_LOGIN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // repeated .Protocol.ObjectInfo players = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_LOGIN)
  return target;
}

size_t S_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_LOGIN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.ObjectInfo players = 2;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_LOGIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_LOGIN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_LOGIN::GetClassData() const { return &_class_data_; }


void S_LOGIN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_LOGIN*>(&to_msg);
  auto& from = static_cast<const S_LOGIN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_LOGIN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_LOGIN::CopyFrom(const S_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_LOGIN::IsInitialized() const {
  return true;
}

void S_LOGIN::InternalSwap(S_LOGIN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_LOGIN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[1]);
}

// ===================================================================

class C_CREATE_NEW_PLAYER::_Internal {
 public:
};

C_CREATE_NEW_PLAYER::C_CREATE_NEW_PLAYER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_CREATE_NEW_PLAYER)
}
C_CREATE_NEW_PLAYER::C_CREATE_NEW_PLAYER(const C_CREATE_NEW_PLAYER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_CREATE_NEW_PLAYER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_name_){}
    , decltype(_impl_.player_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.player_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_player_name().empty()) {
    _this->_impl_.player_name_.Set(from._internal_player_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.player_type_ = from._impl_.player_type_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_CREATE_NEW_PLAYER)
}

inline void C_CREATE_NEW_PLAYER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_name_){}
    , decltype(_impl_.player_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.player_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_CREATE_NEW_PLAYER::~C_CREATE_NEW_PLAYER() {
  // @@protoc_insertion_point(destructor:Protocol.C_CREATE_NEW_PLAYER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_CREATE_NEW_PLAYER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_name_.Destroy();
}

void C_CREATE_NEW_PLAYER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_CREATE_NEW_PLAYER::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_CREATE_NEW_PLAYER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_name_.ClearToEmpty();
  _impl_.player_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_CREATE_NEW_PLAYER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string player_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_player_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_CREATE_NEW_PLAYER.player_name"));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.CreatureType player_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_player_type(static_cast<::Protocol::CreatureType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_CREATE_NEW_PLAYER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_CREATE_NEW_PLAYER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string player_name = 1;
  if (!this->_internal_player_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_player_name().data(), static_cast<int>(this->_internal_player_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_CREATE_NEW_PLAYER.player_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_player_name(), target);
  }

  // .Protocol.CreatureType player_type = 2;
  if (this->_internal_player_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_player_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_CREATE_NEW_PLAYER)
  return target;
}

size_t C_CREATE_NEW_PLAYER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_CREATE_NEW_PLAYER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string player_name = 1;
  if (!this->_internal_player_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_player_name());
  }

  // .Protocol.CreatureType player_type = 2;
  if (this->_internal_player_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_player_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_CREATE_NEW_PLAYER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_CREATE_NEW_PLAYER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_CREATE_NEW_PLAYER::GetClassData() const { return &_class_data_; }


void C_CREATE_NEW_PLAYER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_CREATE_NEW_PLAYER*>(&to_msg);
  auto& from = static_cast<const C_CREATE_NEW_PLAYER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_CREATE_NEW_PLAYER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_player_name().empty()) {
    _this->_internal_set_player_name(from._internal_player_name());
  }
  if (from._internal_player_type() != 0) {
    _this->_internal_set_player_type(from._internal_player_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_CREATE_NEW_PLAYER::CopyFrom(const C_CREATE_NEW_PLAYER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_CREATE_NEW_PLAYER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_CREATE_NEW_PLAYER::IsInitialized() const {
  return true;
}

void C_CREATE_NEW_PLAYER::InternalSwap(C_CREATE_NEW_PLAYER* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.player_name_, lhs_arena,
      &other->_impl_.player_name_, rhs_arena
  );
  swap(_impl_.player_type_, other->_impl_.player_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_CREATE_NEW_PLAYER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[2]);
}

// ===================================================================

class C_ENTER_GAME::_Internal {
 public:
};

C_ENTER_GAME::C_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_ENTER_GAME)
}
C_ENTER_GAME::C_ENTER_GAME(const C_ENTER_GAME& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_ENTER_GAME* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerindex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.playerindex_ = from._impl_.playerindex_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_ENTER_GAME)
}

inline void C_ENTER_GAME::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerindex_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_ENTER_GAME::~C_ENTER_GAME() {
  // @@protoc_insertion_point(destructor:Protocol.C_ENTER_GAME)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_ENTER_GAME::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_ENTER_GAME::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_ENTER_GAME::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_ENTER_GAME)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playerindex_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_ENTER_GAME::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 playerIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_ENTER_GAME::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_ENTER_GAME)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerIndex = 1;
  if (this->_internal_playerindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_ENTER_GAME)
  return target;
}

size_t C_ENTER_GAME::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_ENTER_GAME)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 playerIndex = 1;
  if (this->_internal_playerindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playerindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_ENTER_GAME::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_ENTER_GAME::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_ENTER_GAME::GetClassData() const { return &_class_data_; }


void C_ENTER_GAME::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_ENTER_GAME*>(&to_msg);
  auto& from = static_cast<const C_ENTER_GAME&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_ENTER_GAME)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playerindex() != 0) {
    _this->_internal_set_playerindex(from._internal_playerindex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_ENTER_GAME::CopyFrom(const C_ENTER_GAME& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_ENTER_GAME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_ENTER_GAME::IsInitialized() const {
  return true;
}

void C_ENTER_GAME::InternalSwap(C_ENTER_GAME* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.playerindex_, other->_impl_.playerindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_ENTER_GAME::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[3]);
}

// ===================================================================

class S_ENTER_GAME::_Internal {
 public:
  static const ::Protocol::ObjectInfo& player(const S_ENTER_GAME* msg);
};

const ::Protocol::ObjectInfo&
S_ENTER_GAME::_Internal::player(const S_ENTER_GAME* msg) {
  return *msg->_impl_.player_;
}
void S_ENTER_GAME::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
S_ENTER_GAME::S_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ENTER_GAME)
}
S_ENTER_GAME::S_ENTER_GAME(const S_ENTER_GAME& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_ENTER_GAME* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::Protocol::ObjectInfo(*from._impl_.player_);
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ENTER_GAME)
}

inline void S_ENTER_GAME::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_ENTER_GAME::~S_ENTER_GAME() {
  // @@protoc_insertion_point(destructor:Protocol.S_ENTER_GAME)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ENTER_GAME::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_;
}

void S_ENTER_GAME::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_ENTER_GAME::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ENTER_GAME)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ENTER_GAME::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.ObjectInfo player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ENTER_GAME::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ENTER_GAME)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .Protocol.ObjectInfo player = 2;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ENTER_GAME)
  return target;
}

size_t S_ENTER_GAME::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ENTER_GAME)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.ObjectInfo player = 2;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ENTER_GAME::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_ENTER_GAME::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ENTER_GAME::GetClassData() const { return &_class_data_; }


void S_ENTER_GAME::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_ENTER_GAME*>(&to_msg);
  auto& from = static_cast<const S_ENTER_GAME&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ENTER_GAME)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::Protocol::ObjectInfo::MergeFrom(
        from._internal_player());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ENTER_GAME::CopyFrom(const S_ENTER_GAME& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ENTER_GAME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ENTER_GAME::IsInitialized() const {
  return true;
}

void S_ENTER_GAME::InternalSwap(S_ENTER_GAME* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_ENTER_GAME, _impl_.success_)
      + sizeof(S_ENTER_GAME::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(S_ENTER_GAME, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ENTER_GAME::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[4]);
}

// ===================================================================

class C_LEAVE_GAME::_Internal {
 public:
};

C_LEAVE_GAME::C_LEAVE_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.C_LEAVE_GAME)
}
C_LEAVE_GAME::C_LEAVE_GAME(const C_LEAVE_GAME& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  C_LEAVE_GAME* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_LEAVE_GAME)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_LEAVE_GAME::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_LEAVE_GAME::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata C_LEAVE_GAME::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[5]);
}

// ===================================================================

class S_LEAVE_GAME::_Internal {
 public:
};

S_LEAVE_GAME::S_LEAVE_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.S_LEAVE_GAME)
}
S_LEAVE_GAME::S_LEAVE_GAME(const S_LEAVE_GAME& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  S_LEAVE_GAME* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_LEAVE_GAME)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_LEAVE_GAME::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_LEAVE_GAME::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata S_LEAVE_GAME::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[6]);
}

// ===================================================================

class S_SPAWN::_Internal {
 public:
};

void S_SPAWN::clear_players() {
  _impl_.players_.Clear();
}
void S_SPAWN::clear_positions() {
  _impl_.positions_.Clear();
}
S_SPAWN::S_SPAWN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_SPAWN)
}
S_SPAWN::S_SPAWN(const S_SPAWN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_SPAWN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.positions_){from._impl_.positions_}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.level_ = from._impl_.level_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_SPAWN)
}

inline void S_SPAWN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){arena}
    , decltype(_impl_.positions_){arena}
    , decltype(_impl_.level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_SPAWN::~S_SPAWN() {
  // @@protoc_insertion_point(destructor:Protocol.S_SPAWN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_SPAWN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
  _impl_.positions_.~RepeatedPtrField();
}

void S_SPAWN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_SPAWN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_SPAWN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _impl_.positions_.Clear();
  _impl_.level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_SPAWN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protocol.ObjectInfo players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Protocol.PosInfo positions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_positions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.LevelType level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_level(static_cast<::Protocol::LevelType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_SPAWN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_SPAWN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protocol.ObjectInfo players = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Protocol.PosInfo positions = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_positions_size()); i < n; i++) {
    const auto& repfield = this->_internal_positions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .Protocol.LevelType level = 3;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_SPAWN)
  return target;
}

size_t S_SPAWN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_SPAWN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.ObjectInfo players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Protocol.PosInfo positions = 2;
  total_size += 1UL * this->_internal_positions_size();
  for (const auto& msg : this->_impl_.positions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Protocol.LevelType level = 3;
  if (this->_internal_level() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_SPAWN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_SPAWN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_SPAWN::GetClassData() const { return &_class_data_; }


void S_SPAWN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_SPAWN*>(&to_msg);
  auto& from = static_cast<const S_SPAWN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_SPAWN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  _this->_impl_.positions_.MergeFrom(from._impl_.positions_);
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_SPAWN::CopyFrom(const S_SPAWN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_SPAWN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SPAWN::IsInitialized() const {
  return true;
}

void S_SPAWN::InternalSwap(S_SPAWN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  _impl_.positions_.InternalSwap(&other->_impl_.positions_);
  swap(_impl_.level_, other->_impl_.level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_SPAWN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[7]);
}

// ===================================================================

class S_DESPAWN::_Internal {
 public:
};

S_DESPAWN::S_DESPAWN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_DESPAWN)
}
S_DESPAWN::S_DESPAWN(const S_DESPAWN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_DESPAWN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_ids_){from._impl_.object_ids_}
    , /*decltype(_impl_._object_ids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_DESPAWN)
}

inline void S_DESPAWN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_ids_){arena}
    , /*decltype(_impl_._object_ids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_DESPAWN::~S_DESPAWN() {
  // @@protoc_insertion_point(destructor:Protocol.S_DESPAWN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_DESPAWN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.object_ids_.~RepeatedField();
}

void S_DESPAWN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_DESPAWN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_DESPAWN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.object_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_DESPAWN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 object_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_object_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_object_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_DESPAWN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_DESPAWN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 object_ids = 1;
  {
    int byte_size = _impl_._object_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_object_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_DESPAWN)
  return target;
}

size_t S_DESPAWN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_DESPAWN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 object_ids = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.object_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._object_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_DESPAWN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_DESPAWN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_DESPAWN::GetClassData() const { return &_class_data_; }


void S_DESPAWN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_DESPAWN*>(&to_msg);
  auto& from = static_cast<const S_DESPAWN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_DESPAWN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.object_ids_.MergeFrom(from._impl_.object_ids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_DESPAWN::CopyFrom(const S_DESPAWN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_DESPAWN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_DESPAWN::IsInitialized() const {
  return true;
}

void S_DESPAWN::InternalSwap(S_DESPAWN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.object_ids_.InternalSwap(&other->_impl_.object_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_DESPAWN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[8]);
}

// ===================================================================

class C_CHANGE_LEVEL::_Internal {
 public:
  static const ::Protocol::PosInfo& spawn_pos(const C_CHANGE_LEVEL* msg);
};

const ::Protocol::PosInfo&
C_CHANGE_LEVEL::_Internal::spawn_pos(const C_CHANGE_LEVEL* msg) {
  return *msg->_impl_.spawn_pos_;
}
void C_CHANGE_LEVEL::clear_spawn_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.spawn_pos_ != nullptr) {
    delete _impl_.spawn_pos_;
  }
  _impl_.spawn_pos_ = nullptr;
}
C_CHANGE_LEVEL::C_CHANGE_LEVEL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_CHANGE_LEVEL)
}
C_CHANGE_LEVEL::C_CHANGE_LEVEL(const C_CHANGE_LEVEL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_CHANGE_LEVEL* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.spawn_pos_){nullptr}
    , decltype(_impl_.next_level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spawn_pos()) {
    _this->_impl_.spawn_pos_ = new ::Protocol::PosInfo(*from._impl_.spawn_pos_);
  }
  _this->_impl_.next_level_ = from._impl_.next_level_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_CHANGE_LEVEL)
}

inline void C_CHANGE_LEVEL::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.spawn_pos_){nullptr}
    , decltype(_impl_.next_level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_CHANGE_LEVEL::~C_CHANGE_LEVEL() {
  // @@protoc_insertion_point(destructor:Protocol.C_CHANGE_LEVEL)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_CHANGE_LEVEL::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.spawn_pos_;
}

void C_CHANGE_LEVEL::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_CHANGE_LEVEL::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_CHANGE_LEVEL)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.spawn_pos_ != nullptr) {
    delete _impl_.spawn_pos_;
  }
  _impl_.spawn_pos_ = nullptr;
  _impl_.next_level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_CHANGE_LEVEL::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.LevelType next_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_next_level(static_cast<::Protocol::LevelType>(val));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PosInfo spawn_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spawn_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_CHANGE_LEVEL::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_CHANGE_LEVEL)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.LevelType next_level = 1;
  if (this->_internal_next_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_next_level(), target);
  }

  // .Protocol.PosInfo spawn_pos = 2;
  if (this->_internal_has_spawn_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::spawn_pos(this),
        _Internal::spawn_pos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_CHANGE_LEVEL)
  return target;
}

size_t C_CHANGE_LEVEL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_CHANGE_LEVEL)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PosInfo spawn_pos = 2;
  if (this->_internal_has_spawn_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.spawn_pos_);
  }

  // .Protocol.LevelType next_level = 1;
  if (this->_internal_next_level() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_next_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_CHANGE_LEVEL::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_CHANGE_LEVEL::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_CHANGE_LEVEL::GetClassData() const { return &_class_data_; }


void C_CHANGE_LEVEL::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_CHANGE_LEVEL*>(&to_msg);
  auto& from = static_cast<const C_CHANGE_LEVEL&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_CHANGE_LEVEL)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_spawn_pos()) {
    _this->_internal_mutable_spawn_pos()->::Protocol::PosInfo::MergeFrom(
        from._internal_spawn_pos());
  }
  if (from._internal_next_level() != 0) {
    _this->_internal_set_next_level(from._internal_next_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_CHANGE_LEVEL::CopyFrom(const C_CHANGE_LEVEL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_CHANGE_LEVEL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_CHANGE_LEVEL::IsInitialized() const {
  return true;
}

void C_CHANGE_LEVEL::InternalSwap(C_CHANGE_LEVEL* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_CHANGE_LEVEL, _impl_.next_level_)
      + sizeof(C_CHANGE_LEVEL::_impl_.next_level_)
      - PROTOBUF_FIELD_OFFSET(C_CHANGE_LEVEL, _impl_.spawn_pos_)>(
          reinterpret_cast<char*>(&_impl_.spawn_pos_),
          reinterpret_cast<char*>(&other->_impl_.spawn_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_CHANGE_LEVEL::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[9]);
}

// ===================================================================

class C_MOVE::_Internal {
 public:
  static const ::Protocol::PosInfo& current_pos(const C_MOVE* msg);
};

const ::Protocol::PosInfo&
C_MOVE::_Internal::current_pos(const C_MOVE* msg) {
  return *msg->_impl_.current_pos_;
}
void C_MOVE::clear_current_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.current_pos_ != nullptr) {
    delete _impl_.current_pos_;
  }
  _impl_.current_pos_ = nullptr;
}
C_MOVE::C_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_MOVE)
}
C_MOVE::C_MOVE(const C_MOVE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_MOVE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.current_pos_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_current_pos()) {
    _this->_impl_.current_pos_ = new ::Protocol::PosInfo(*from._impl_.current_pos_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_MOVE)
}

inline void C_MOVE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.current_pos_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_MOVE::~C_MOVE() {
  // @@protoc_insertion_point(destructor:Protocol.C_MOVE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_MOVE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.current_pos_;
}

void C_MOVE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_MOVE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_MOVE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.current_pos_ != nullptr) {
    delete _impl_.current_pos_;
  }
  _impl_.current_pos_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_MOVE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.PosInfo current_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_MOVE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_MOVE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.PosInfo current_pos = 1;
  if (this->_internal_has_current_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::current_pos(this),
        _Internal::current_pos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_MOVE)
  return target;
}

size_t C_MOVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_MOVE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PosInfo current_pos = 1;
  if (this->_internal_has_current_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.current_pos_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_MOVE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_MOVE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_MOVE::GetClassData() const { return &_class_data_; }


void C_MOVE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_MOVE*>(&to_msg);
  auto& from = static_cast<const C_MOVE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_MOVE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_current_pos()) {
    _this->_internal_mutable_current_pos()->::Protocol::PosInfo::MergeFrom(
        from._internal_current_pos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_MOVE::CopyFrom(const C_MOVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_MOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_MOVE::IsInitialized() const {
  return true;
}

void C_MOVE::InternalSwap(C_MOVE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.current_pos_, other->_impl_.current_pos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_MOVE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[10]);
}

// ===================================================================

class S_MOVE::_Internal {
 public:
  static const ::Protocol::PosInfo& current_pos(const S_MOVE* msg);
};

const ::Protocol::PosInfo&
S_MOVE::_Internal::current_pos(const S_MOVE* msg) {
  return *msg->_impl_.current_pos_;
}
void S_MOVE::clear_current_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.current_pos_ != nullptr) {
    delete _impl_.current_pos_;
  }
  _impl_.current_pos_ = nullptr;
}
S_MOVE::S_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_MOVE)
}
S_MOVE::S_MOVE(const S_MOVE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_MOVE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.current_pos_){nullptr}
    , decltype(_impl_.object_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_current_pos()) {
    _this->_impl_.current_pos_ = new ::Protocol::PosInfo(*from._impl_.current_pos_);
  }
  _this->_impl_.object_id_ = from._impl_.object_id_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_MOVE)
}

inline void S_MOVE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.current_pos_){nullptr}
    , decltype(_impl_.object_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_MOVE::~S_MOVE() {
  // @@protoc_insertion_point(destructor:Protocol.S_MOVE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_MOVE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.current_pos_;
}

void S_MOVE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_MOVE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_MOVE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.current_pos_ != nullptr) {
    delete _impl_.current_pos_;
  }
  _impl_.current_pos_ = nullptr;
  _impl_.object_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_MOVE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.PosInfo current_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 object_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_MOVE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_MOVE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.PosInfo current_pos = 1;
  if (this->_internal_has_current_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::current_pos(this),
        _Internal::current_pos(this).GetCachedSize(), target, stream);
  }

  // uint64 object_id = 2;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_MOVE)
  return target;
}

size_t S_MOVE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_MOVE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PosInfo current_pos = 1;
  if (this->_internal_has_current_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.current_pos_);
  }

  // uint64 object_id = 2;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_MOVE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_MOVE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_MOVE::GetClassData() const { return &_class_data_; }


void S_MOVE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_MOVE*>(&to_msg);
  auto& from = static_cast<const S_MOVE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_MOVE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_current_pos()) {
    _this->_internal_mutable_current_pos()->::Protocol::PosInfo::MergeFrom(
        from._internal_current_pos());
  }
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_MOVE::CopyFrom(const S_MOVE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_MOVE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_MOVE::IsInitialized() const {
  return true;
}

void S_MOVE::InternalSwap(S_MOVE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_MOVE, _impl_.object_id_)
      + sizeof(S_MOVE::_impl_.object_id_)
      - PROTOBUF_FIELD_OFFSET(S_MOVE, _impl_.current_pos_)>(
          reinterpret_cast<char*>(&_impl_.current_pos_),
          reinterpret_cast<char*>(&other->_impl_.current_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_MOVE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[11]);
}

// ===================================================================

class C_LOOK::_Internal {
 public:
  static const ::Protocol::PosInfo& look_pos(const C_LOOK* msg);
};

const ::Protocol::PosInfo&
C_LOOK::_Internal::look_pos(const C_LOOK* msg) {
  return *msg->_impl_.look_pos_;
}
void C_LOOK::clear_look_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.look_pos_ != nullptr) {
    delete _impl_.look_pos_;
  }
  _impl_.look_pos_ = nullptr;
}
C_LOOK::C_LOOK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_LOOK)
}
C_LOOK::C_LOOK(const C_LOOK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_LOOK* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.look_pos_){nullptr}
    , decltype(_impl_.yaw_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_look_pos()) {
    _this->_impl_.look_pos_ = new ::Protocol::PosInfo(*from._impl_.look_pos_);
  }
  _this->_impl_.yaw_ = from._impl_.yaw_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_LOOK)
}

inline void C_LOOK::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.look_pos_){nullptr}
    , decltype(_impl_.yaw_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_LOOK::~C_LOOK() {
  // @@protoc_insertion_point(destructor:Protocol.C_LOOK)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_LOOK::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.look_pos_;
}

void C_LOOK::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_LOOK::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_LOOK)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.look_pos_ != nullptr) {
    delete _impl_.look_pos_;
  }
  _impl_.look_pos_ = nullptr;
  _impl_.yaw_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_LOOK::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.PosInfo look_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_look_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float yaw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_LOOK::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_LOOK)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.PosInfo look_pos = 1;
  if (this->_internal_has_look_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::look_pos(this),
        _Internal::look_pos(this).GetCachedSize(), target, stream);
  }

  // float yaw = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_yaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_LOOK)
  return target;
}

size_t C_LOOK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_LOOK)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PosInfo look_pos = 1;
  if (this->_internal_has_look_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.look_pos_);
  }

  // float yaw = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_LOOK::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_LOOK::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_LOOK::GetClassData() const { return &_class_data_; }


void C_LOOK::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_LOOK*>(&to_msg);
  auto& from = static_cast<const C_LOOK&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_LOOK)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_look_pos()) {
    _this->_internal_mutable_look_pos()->::Protocol::PosInfo::MergeFrom(
        from._internal_look_pos());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = from._internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _this->_internal_set_yaw(from._internal_yaw());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_LOOK::CopyFrom(const C_LOOK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_LOOK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_LOOK::IsInitialized() const {
  return true;
}

void C_LOOK::InternalSwap(C_LOOK* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_LOOK, _impl_.yaw_)
      + sizeof(C_LOOK::_impl_.yaw_)
      - PROTOBUF_FIELD_OFFSET(C_LOOK, _impl_.look_pos_)>(
          reinterpret_cast<char*>(&_impl_.look_pos_),
          reinterpret_cast<char*>(&other->_impl_.look_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_LOOK::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[12]);
}

// ===================================================================

class S_LOOK::_Internal {
 public:
  static const ::Protocol::PosInfo& look_pos(const S_LOOK* msg);
};

const ::Protocol::PosInfo&
S_LOOK::_Internal::look_pos(const S_LOOK* msg) {
  return *msg->_impl_.look_pos_;
}
void S_LOOK::clear_look_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.look_pos_ != nullptr) {
    delete _impl_.look_pos_;
  }
  _impl_.look_pos_ = nullptr;
}
S_LOOK::S_LOOK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_LOOK)
}
S_LOOK::S_LOOK(const S_LOOK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_LOOK* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.look_pos_){nullptr}
    , decltype(_impl_.object_id_){}
    , decltype(_impl_.look_target_){}
    , decltype(_impl_.yaw_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_look_pos()) {
    _this->_impl_.look_pos_ = new ::Protocol::PosInfo(*from._impl_.look_pos_);
  }
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.yaw_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.yaw_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_LOOK)
}

inline void S_LOOK::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.look_pos_){nullptr}
    , decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.look_target_){uint64_t{0u}}
    , decltype(_impl_.yaw_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_LOOK::~S_LOOK() {
  // @@protoc_insertion_point(destructor:Protocol.S_LOOK)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_LOOK::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.look_pos_;
}

void S_LOOK::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_LOOK::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_LOOK)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.look_pos_ != nullptr) {
    delete _impl_.look_pos_;
  }
  _impl_.look_pos_ = nullptr;
  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.yaw_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.yaw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_LOOK::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 look_target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.look_target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PosInfo look_pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_look_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float yaw = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_LOOK::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_LOOK)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // uint64 look_target = 2;
  if (this->_internal_look_target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_look_target(), target);
  }

  // .Protocol.PosInfo look_pos = 3;
  if (this->_internal_has_look_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::look_pos(this),
        _Internal::look_pos(this).GetCachedSize(), target, stream);
  }

  // float yaw = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_yaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_LOOK)
  return target;
}

size_t S_LOOK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_LOOK)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PosInfo look_pos = 3;
  if (this->_internal_has_look_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.look_pos_);
  }

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // uint64 look_target = 2;
  if (this->_internal_look_target() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_look_target());
  }

  // float yaw = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_LOOK::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_LOOK::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_LOOK::GetClassData() const { return &_class_data_; }


void S_LOOK::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_LOOK*>(&to_msg);
  auto& from = static_cast<const S_LOOK&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_LOOK)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_look_pos()) {
    _this->_internal_mutable_look_pos()->::Protocol::PosInfo::MergeFrom(
        from._internal_look_pos());
  }
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_look_target() != 0) {
    _this->_internal_set_look_target(from._internal_look_target());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = from._internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _this->_internal_set_yaw(from._internal_yaw());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_LOOK::CopyFrom(const S_LOOK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_LOOK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_LOOK::IsInitialized() const {
  return true;
}

void S_LOOK::InternalSwap(S_LOOK* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_LOOK, _impl_.yaw_)
      + sizeof(S_LOOK::_impl_.yaw_)
      - PROTOBUF_FIELD_OFFSET(S_LOOK, _impl_.look_pos_)>(
          reinterpret_cast<char*>(&_impl_.look_pos_),
          reinterpret_cast<char*>(&other->_impl_.look_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_LOOK::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[13]);
}

// ===================================================================

class C_ANIMATION::_Internal {
 public:
};

C_ANIMATION::C_ANIMATION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_ANIMATION)
}
C_ANIMATION::C_ANIMATION(const C_ANIMATION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_ANIMATION* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ani_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.ani_type_ = from._impl_.ani_type_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_ANIMATION)
}

inline void C_ANIMATION::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ani_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_ANIMATION::~C_ANIMATION() {
  // @@protoc_insertion_point(destructor:Protocol.C_ANIMATION)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_ANIMATION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_ANIMATION::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_ANIMATION::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_ANIMATION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ani_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_ANIMATION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.AnimationType ani_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ani_type(static_cast<::Protocol::AnimationType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_ANIMATION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_ANIMATION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.AnimationType ani_type = 1;
  if (this->_internal_ani_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_ani_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_ANIMATION)
  return target;
}

size_t C_ANIMATION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_ANIMATION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.AnimationType ani_type = 1;
  if (this->_internal_ani_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_ani_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_ANIMATION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_ANIMATION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_ANIMATION::GetClassData() const { return &_class_data_; }


void C_ANIMATION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_ANIMATION*>(&to_msg);
  auto& from = static_cast<const C_ANIMATION&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_ANIMATION)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ani_type() != 0) {
    _this->_internal_set_ani_type(from._internal_ani_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_ANIMATION::CopyFrom(const C_ANIMATION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_ANIMATION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_ANIMATION::IsInitialized() const {
  return true;
}

void C_ANIMATION::InternalSwap(C_ANIMATION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.ani_type_, other->_impl_.ani_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_ANIMATION::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[14]);
}

// ===================================================================

class S_ANIMATION::_Internal {
 public:
};

S_ANIMATION::S_ANIMATION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ANIMATION)
}
S_ANIMATION::S_ANIMATION(const S_ANIMATION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_ANIMATION* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.ani_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ani_type_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.ani_type_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ANIMATION)
}

inline void S_ANIMATION::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.ani_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_ANIMATION::~S_ANIMATION() {
  // @@protoc_insertion_point(destructor:Protocol.S_ANIMATION)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ANIMATION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_ANIMATION::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_ANIMATION::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ANIMATION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ani_type_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.ani_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ANIMATION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.AnimationType ani_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ani_type(static_cast<::Protocol::AnimationType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 object_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ANIMATION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ANIMATION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.AnimationType ani_type = 1;
  if (this->_internal_ani_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_ani_type(), target);
  }

  // uint64 object_id = 2;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ANIMATION)
  return target;
}

size_t S_ANIMATION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ANIMATION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 2;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // .Protocol.AnimationType ani_type = 1;
  if (this->_internal_ani_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_ani_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ANIMATION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_ANIMATION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ANIMATION::GetClassData() const { return &_class_data_; }


void S_ANIMATION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_ANIMATION*>(&to_msg);
  auto& from = static_cast<const S_ANIMATION&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ANIMATION)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_ani_type() != 0) {
    _this->_internal_set_ani_type(from._internal_ani_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ANIMATION::CopyFrom(const S_ANIMATION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ANIMATION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ANIMATION::IsInitialized() const {
  return true;
}

void S_ANIMATION::InternalSwap(S_ANIMATION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_ANIMATION, _impl_.ani_type_)
      + sizeof(S_ANIMATION::_impl_.ani_type_)
      - PROTOBUF_FIELD_OFFSET(S_ANIMATION, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ANIMATION::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[15]);
}

// ===================================================================

class C_ATTACK::_Internal {
 public:
  static const ::Protocol::PosInfo& target_pos(const C_ATTACK* msg);
};

const ::Protocol::PosInfo&
C_ATTACK::_Internal::target_pos(const C_ATTACK* msg) {
  return *msg->_impl_.target_pos_;
}
void C_ATTACK::clear_target_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.target_pos_ != nullptr) {
    delete _impl_.target_pos_;
  }
  _impl_.target_pos_ = nullptr;
}
C_ATTACK::C_ATTACK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_ATTACK)
}
C_ATTACK::C_ATTACK(const C_ATTACK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_ATTACK* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.target_pos_){nullptr}
    , decltype(_impl_.target_id_){}
    , decltype(_impl_.attack_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_target_pos()) {
    _this->_impl_.target_pos_ = new ::Protocol::PosInfo(*from._impl_.target_pos_);
  }
  ::memcpy(&_impl_.target_id_, &from._impl_.target_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.attack_type_) -
    reinterpret_cast<char*>(&_impl_.target_id_)) + sizeof(_impl_.attack_type_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_ATTACK)
}

inline void C_ATTACK::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.target_pos_){nullptr}
    , decltype(_impl_.target_id_){uint64_t{0u}}
    , decltype(_impl_.attack_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_ATTACK::~C_ATTACK() {
  // @@protoc_insertion_point(destructor:Protocol.C_ATTACK)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_ATTACK::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.target_pos_;
}

void C_ATTACK::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_ATTACK::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_ATTACK)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.target_pos_ != nullptr) {
    delete _impl_.target_pos_;
  }
  _impl_.target_pos_ = nullptr;
  ::memset(&_impl_.target_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.attack_type_) -
      reinterpret_cast<char*>(&_impl_.target_id_)) + sizeof(_impl_.attack_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_ATTACK::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 target_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PosInfo target_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.AttackType attack_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_attack_type(static_cast<::Protocol::AttackType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_ATTACK::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_ATTACK)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 target_id = 1;
  if (this->_internal_target_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_target_id(), target);
  }

  // .Protocol.PosInfo target_pos = 2;
  if (this->_internal_has_target_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::target_pos(this),
        _Internal::target_pos(this).GetCachedSize(), target, stream);
  }

  // .Protocol.AttackType attack_type = 3;
  if (this->_internal_attack_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_attack_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_ATTACK)
  return target;
}

size_t C_ATTACK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_ATTACK)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PosInfo target_pos = 2;
  if (this->_internal_has_target_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.target_pos_);
  }

  // uint64 target_id = 1;
  if (this->_internal_target_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_target_id());
  }

  // .Protocol.AttackType attack_type = 3;
  if (this->_internal_attack_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_attack_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_ATTACK::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_ATTACK::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_ATTACK::GetClassData() const { return &_class_data_; }


void C_ATTACK::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_ATTACK*>(&to_msg);
  auto& from = static_cast<const C_ATTACK&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_ATTACK)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_target_pos()) {
    _this->_internal_mutable_target_pos()->::Protocol::PosInfo::MergeFrom(
        from._internal_target_pos());
  }
  if (from._internal_target_id() != 0) {
    _this->_internal_set_target_id(from._internal_target_id());
  }
  if (from._internal_attack_type() != 0) {
    _this->_internal_set_attack_type(from._internal_attack_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_ATTACK::CopyFrom(const C_ATTACK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_ATTACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_ATTACK::IsInitialized() const {
  return true;
}

void C_ATTACK::InternalSwap(C_ATTACK* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_ATTACK, _impl_.attack_type_)
      + sizeof(C_ATTACK::_impl_.attack_type_)
      - PROTOBUF_FIELD_OFFSET(C_ATTACK, _impl_.target_pos_)>(
          reinterpret_cast<char*>(&_impl_.target_pos_),
          reinterpret_cast<char*>(&other->_impl_.target_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_ATTACK::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[16]);
}

// ===================================================================

class S_ATTACK::_Internal {
 public:
};

S_ATTACK::S_ATTACK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ATTACK)
}
S_ATTACK::S_ATTACK(const S_ATTACK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_ATTACK* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.victim_id_){}
    , decltype(_impl_.hp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.victim_id_, &from._impl_.victim_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hp_) -
    reinterpret_cast<char*>(&_impl_.victim_id_)) + sizeof(_impl_.hp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ATTACK)
}

inline void S_ATTACK::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.victim_id_){uint64_t{0u}}
    , decltype(_impl_.hp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_ATTACK::~S_ATTACK() {
  // @@protoc_insertion_point(destructor:Protocol.S_ATTACK)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ATTACK::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_ATTACK::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_ATTACK::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ATTACK)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.victim_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.hp_) -
      reinterpret_cast<char*>(&_impl_.victim_id_)) + sizeof(_impl_.hp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ATTACK::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 victim_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.victim_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ATTACK::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ATTACK)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 victim_id = 1;
  if (this->_internal_victim_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_victim_id(), target);
  }

  // int32 hp = 2;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_hp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ATTACK)
  return target;
}

size_t S_ATTACK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ATTACK)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 victim_id = 1;
  if (this->_internal_victim_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_victim_id());
  }

  // int32 hp = 2;
  if (this->_internal_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ATTACK::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_ATTACK::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ATTACK::GetClassData() const { return &_class_data_; }


void S_ATTACK::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_ATTACK*>(&to_msg);
  auto& from = static_cast<const S_ATTACK&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ATTACK)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_victim_id() != 0) {
    _this->_internal_set_victim_id(from._internal_victim_id());
  }
  if (from._internal_hp() != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ATTACK::CopyFrom(const S_ATTACK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ATTACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ATTACK::IsInitialized() const {
  return true;
}

void S_ATTACK::InternalSwap(S_ATTACK* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_ATTACK, _impl_.hp_)
      + sizeof(S_ATTACK::_impl_.hp_)
      - PROTOBUF_FIELD_OFFSET(S_ATTACK, _impl_.victim_id_)>(
          reinterpret_cast<char*>(&_impl_.victim_id_),
          reinterpret_cast<char*>(&other->_impl_.victim_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ATTACK::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[17]);
}

// ===================================================================

class C_THINK::_Internal {
 public:
};

C_THINK::C_THINK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_THINK)
}
C_THINK::C_THINK(const C_THINK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_THINK* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attack_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.attack_type_ = from._impl_.attack_type_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_THINK)
}

inline void C_THINK::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.attack_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_THINK::~C_THINK() {
  // @@protoc_insertion_point(destructor:Protocol.C_THINK)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_THINK::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_THINK::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_THINK::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_THINK)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attack_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_THINK::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.AttackType attack_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_attack_type(static_cast<::Protocol::AttackType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_THINK::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_THINK)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.AttackType attack_type = 1;
  if (this->_internal_attack_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_attack_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_THINK)
  return target;
}

size_t C_THINK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_THINK)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.AttackType attack_type = 1;
  if (this->_internal_attack_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_attack_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_THINK::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_THINK::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_THINK::GetClassData() const { return &_class_data_; }


void C_THINK::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_THINK*>(&to_msg);
  auto& from = static_cast<const C_THINK&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_THINK)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_attack_type() != 0) {
    _this->_internal_set_attack_type(from._internal_attack_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_THINK::CopyFrom(const C_THINK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_THINK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_THINK::IsInitialized() const {
  return true;
}

void C_THINK::InternalSwap(C_THINK* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.attack_type_, other->_impl_.attack_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_THINK::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[18]);
}

// ===================================================================

class S_THINK::_Internal {
 public:
};

S_THINK::S_THINK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_THINK)
}
S_THINK::S_THINK(const S_THINK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_THINK* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.attack_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.attack_type_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.attack_type_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_THINK)
}

inline void S_THINK::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.attack_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_THINK::~S_THINK() {
  // @@protoc_insertion_point(destructor:Protocol.S_THINK)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_THINK::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_THINK::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_THINK::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_THINK)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.attack_type_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.attack_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_THINK::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.AttackType attack_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_attack_type(static_cast<::Protocol::AttackType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 object_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_THINK::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_THINK)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.AttackType attack_type = 1;
  if (this->_internal_attack_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_attack_type(), target);
  }

  // uint64 object_id = 2;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_THINK)
  return target;
}

size_t S_THINK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_THINK)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 2;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // .Protocol.AttackType attack_type = 1;
  if (this->_internal_attack_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_attack_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_THINK::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_THINK::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_THINK::GetClassData() const { return &_class_data_; }


void S_THINK::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_THINK*>(&to_msg);
  auto& from = static_cast<const S_THINK&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_THINK)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_attack_type() != 0) {
    _this->_internal_set_attack_type(from._internal_attack_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_THINK::CopyFrom(const S_THINK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_THINK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_THINK::IsInitialized() const {
  return true;
}

void S_THINK::InternalSwap(S_THINK* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_THINK, _impl_.attack_type_)
      + sizeof(S_THINK::_impl_.attack_type_)
      - PROTOBUF_FIELD_OFFSET(S_THINK, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_THINK::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[19]);
}

// ===================================================================

class S_THINK_DONE::_Internal {
 public:
};

S_THINK_DONE::S_THINK_DONE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_THINK_DONE)
}
S_THINK_DONE::S_THINK_DONE(const S_THINK_DONE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_THINK_DONE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.attack_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.attack_type_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.attack_type_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_THINK_DONE)
}

inline void S_THINK_DONE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.attack_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_THINK_DONE::~S_THINK_DONE() {
  // @@protoc_insertion_point(destructor:Protocol.S_THINK_DONE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_THINK_DONE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_THINK_DONE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_THINK_DONE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_THINK_DONE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.attack_type_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.attack_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_THINK_DONE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.AttackType attack_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_attack_type(static_cast<::Protocol::AttackType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 object_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_THINK_DONE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_THINK_DONE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.AttackType attack_type = 1;
  if (this->_internal_attack_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_attack_type(), target);
  }

  // uint64 object_id = 2;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_THINK_DONE)
  return target;
}

size_t S_THINK_DONE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_THINK_DONE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 2;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // .Protocol.AttackType attack_type = 1;
  if (this->_internal_attack_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_attack_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_THINK_DONE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_THINK_DONE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_THINK_DONE::GetClassData() const { return &_class_data_; }


void S_THINK_DONE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_THINK_DONE*>(&to_msg);
  auto& from = static_cast<const S_THINK_DONE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_THINK_DONE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_attack_type() != 0) {
    _this->_internal_set_attack_type(from._internal_attack_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_THINK_DONE::CopyFrom(const S_THINK_DONE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_THINK_DONE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_THINK_DONE::IsInitialized() const {
  return true;
}

void S_THINK_DONE::InternalSwap(S_THINK_DONE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_THINK_DONE, _impl_.attack_type_)
      + sizeof(S_THINK_DONE::_impl_.attack_type_)
      - PROTOBUF_FIELD_OFFSET(S_THINK_DONE, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_THINK_DONE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[20]);
}

// ===================================================================

class C_SPAWN_PARTICLE::_Internal {
 public:
  static const ::Protocol::PosInfo& position(const C_SPAWN_PARTICLE* msg);
};

const ::Protocol::PosInfo&
C_SPAWN_PARTICLE::_Internal::position(const C_SPAWN_PARTICLE* msg) {
  return *msg->_impl_.position_;
}
void C_SPAWN_PARTICLE::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
C_SPAWN_PARTICLE::C_SPAWN_PARTICLE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_SPAWN_PARTICLE)
}
C_SPAWN_PARTICLE::C_SPAWN_PARTICLE(const C_SPAWN_PARTICLE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_SPAWN_PARTICLE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.yaw_){}
    , decltype(_impl_.particle_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::Protocol::PosInfo(*from._impl_.position_);
  }
  ::memcpy(&_impl_.yaw_, &from._impl_.yaw_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.particle_type_) -
    reinterpret_cast<char*>(&_impl_.yaw_)) + sizeof(_impl_.particle_type_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_SPAWN_PARTICLE)
}

inline void C_SPAWN_PARTICLE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.yaw_){0}
    , decltype(_impl_.particle_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_SPAWN_PARTICLE::~C_SPAWN_PARTICLE() {
  // @@protoc_insertion_point(destructor:Protocol.C_SPAWN_PARTICLE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_SPAWN_PARTICLE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
}

void C_SPAWN_PARTICLE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_SPAWN_PARTICLE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_SPAWN_PARTICLE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  ::memset(&_impl_.yaw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.particle_type_) -
      reinterpret_cast<char*>(&_impl_.yaw_)) + sizeof(_impl_.particle_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_SPAWN_PARTICLE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.PosInfo position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float yaw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.ParticleType particle_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_particle_type(static_cast<::Protocol::ParticleType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_SPAWN_PARTICLE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_SPAWN_PARTICLE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.PosInfo position = 1;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // float yaw = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_yaw(), target);
  }

  // .Protocol.ParticleType particle_type = 3;
  if (this->_internal_particle_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_particle_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_SPAWN_PARTICLE)
  return target;
}

size_t C_SPAWN_PARTICLE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_SPAWN_PARTICLE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PosInfo position = 1;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // float yaw = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 1 + 4;
  }

  // .Protocol.ParticleType particle_type = 3;
  if (this->_internal_particle_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_particle_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_SPAWN_PARTICLE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_SPAWN_PARTICLE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_SPAWN_PARTICLE::GetClassData() const { return &_class_data_; }


void C_SPAWN_PARTICLE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_SPAWN_PARTICLE*>(&to_msg);
  auto& from = static_cast<const C_SPAWN_PARTICLE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_SPAWN_PARTICLE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::Protocol::PosInfo::MergeFrom(
        from._internal_position());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = from._internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _this->_internal_set_yaw(from._internal_yaw());
  }
  if (from._internal_particle_type() != 0) {
    _this->_internal_set_particle_type(from._internal_particle_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_SPAWN_PARTICLE::CopyFrom(const C_SPAWN_PARTICLE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_SPAWN_PARTICLE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_SPAWN_PARTICLE::IsInitialized() const {
  return true;
}

void C_SPAWN_PARTICLE::InternalSwap(C_SPAWN_PARTICLE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_SPAWN_PARTICLE, _impl_.particle_type_)
      + sizeof(C_SPAWN_PARTICLE::_impl_.particle_type_)
      - PROTOBUF_FIELD_OFFSET(C_SPAWN_PARTICLE, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_SPAWN_PARTICLE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[21]);
}

// ===================================================================

class S_SPAWN_PARTICLE::_Internal {
 public:
  static const ::Protocol::PosInfo& position(const S_SPAWN_PARTICLE* msg);
};

const ::Protocol::PosInfo&
S_SPAWN_PARTICLE::_Internal::position(const S_SPAWN_PARTICLE* msg) {
  return *msg->_impl_.position_;
}
void S_SPAWN_PARTICLE::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
S_SPAWN_PARTICLE::S_SPAWN_PARTICLE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_SPAWN_PARTICLE)
}
S_SPAWN_PARTICLE::S_SPAWN_PARTICLE(const S_SPAWN_PARTICLE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_SPAWN_PARTICLE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.level_){}
    , decltype(_impl_.yaw_){}
    , decltype(_impl_.particle_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::Protocol::PosInfo(*from._impl_.position_);
  }
  ::memcpy(&_impl_.level_, &from._impl_.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.particle_type_) -
    reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.particle_type_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_SPAWN_PARTICLE)
}

inline void S_SPAWN_PARTICLE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.level_){0}
    , decltype(_impl_.yaw_){0}
    , decltype(_impl_.particle_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_SPAWN_PARTICLE::~S_SPAWN_PARTICLE() {
  // @@protoc_insertion_point(destructor:Protocol.S_SPAWN_PARTICLE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_SPAWN_PARTICLE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
}

void S_SPAWN_PARTICLE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_SPAWN_PARTICLE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_SPAWN_PARTICLE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  ::memset(&_impl_.level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.particle_type_) -
      reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.particle_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_SPAWN_PARTICLE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.LevelType level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_level(static_cast<::Protocol::LevelType>(val));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PosInfo position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float yaw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.ParticleType particle_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_particle_type(static_cast<::Protocol::ParticleType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_SPAWN_PARTICLE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_SPAWN_PARTICLE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.LevelType level = 1;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_level(), target);
  }

  // .Protocol.PosInfo position = 2;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // float yaw = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_yaw(), target);
  }

  // .Protocol.ParticleType particle_type = 4;
  if (this->_internal_particle_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_particle_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_SPAWN_PARTICLE)
  return target;
}

size_t S_SPAWN_PARTICLE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_SPAWN_PARTICLE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.PosInfo position = 2;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // .Protocol.LevelType level = 1;
  if (this->_internal_level() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_level());
  }

  // float yaw = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 1 + 4;
  }

  // .Protocol.ParticleType particle_type = 4;
  if (this->_internal_particle_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_particle_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_SPAWN_PARTICLE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_SPAWN_PARTICLE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_SPAWN_PARTICLE::GetClassData() const { return &_class_data_; }


void S_SPAWN_PARTICLE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_SPAWN_PARTICLE*>(&to_msg);
  auto& from = static_cast<const S_SPAWN_PARTICLE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_SPAWN_PARTICLE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::Protocol::PosInfo::MergeFrom(
        from._internal_position());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = from._internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _this->_internal_set_yaw(from._internal_yaw());
  }
  if (from._internal_particle_type() != 0) {
    _this->_internal_set_particle_type(from._internal_particle_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_SPAWN_PARTICLE::CopyFrom(const S_SPAWN_PARTICLE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_SPAWN_PARTICLE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SPAWN_PARTICLE::IsInitialized() const {
  return true;
}

void S_SPAWN_PARTICLE::InternalSwap(S_SPAWN_PARTICLE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_SPAWN_PARTICLE, _impl_.particle_type_)
      + sizeof(S_SPAWN_PARTICLE::_impl_.particle_type_)
      - PROTOBUF_FIELD_OFFSET(S_SPAWN_PARTICLE, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_SPAWN_PARTICLE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[22]);
}

// ===================================================================

class S_INIT_INVENTORY::_Internal {
 public:
};

void S_INIT_INVENTORY::clear_items() {
  _impl_.items_.Clear();
}
S_INIT_INVENTORY::S_INIT_INVENTORY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_INIT_INVENTORY)
}
S_INIT_INVENTORY::S_INIT_INVENTORY(const S_INIT_INVENTORY& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_INIT_INVENTORY* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_INIT_INVENTORY)
}

inline void S_INIT_INVENTORY::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_INIT_INVENTORY::~S_INIT_INVENTORY() {
  // @@protoc_insertion_point(destructor:Protocol.S_INIT_INVENTORY)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_INIT_INVENTORY::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void S_INIT_INVENTORY::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_INIT_INVENTORY::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_INIT_INVENTORY)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_INIT_INVENTORY::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protocol.ItemInfo items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_INIT_INVENTORY::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_INIT_INVENTORY)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protocol.ItemInfo items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_INIT_INVENTORY)
  return target;
}

size_t S_INIT_INVENTORY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_INIT_INVENTORY)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.ItemInfo items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_INIT_INVENTORY::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_INIT_INVENTORY::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_INIT_INVENTORY::GetClassData() const { return &_class_data_; }


void S_INIT_INVENTORY::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_INIT_INVENTORY*>(&to_msg);
  auto& from = static_cast<const S_INIT_INVENTORY&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_INIT_INVENTORY)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_INIT_INVENTORY::CopyFrom(const S_INIT_INVENTORY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_INIT_INVENTORY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_INIT_INVENTORY::IsInitialized() const {
  return true;
}

void S_INIT_INVENTORY::InternalSwap(S_INIT_INVENTORY* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_INIT_INVENTORY::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[23]);
}

// ===================================================================

class C_DROP_ITEM::_Internal {
 public:
  static const ::Protocol::ItemInfo& item(const C_DROP_ITEM* msg);
};

const ::Protocol::ItemInfo&
C_DROP_ITEM::_Internal::item(const C_DROP_ITEM* msg) {
  return *msg->_impl_.item_;
}
void C_DROP_ITEM::clear_item() {
  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
}
C_DROP_ITEM::C_DROP_ITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_DROP_ITEM)
}
C_DROP_ITEM::C_DROP_ITEM(const C_DROP_ITEM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_DROP_ITEM* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item()) {
    _this->_impl_.item_ = new ::Protocol::ItemInfo(*from._impl_.item_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_DROP_ITEM)
}

inline void C_DROP_ITEM::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_DROP_ITEM::~C_DROP_ITEM() {
  // @@protoc_insertion_point(destructor:Protocol.C_DROP_ITEM)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_DROP_ITEM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.item_;
}

void C_DROP_ITEM::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_DROP_ITEM::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_DROP_ITEM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_DROP_ITEM::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.ItemInfo item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_DROP_ITEM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_DROP_ITEM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.ItemInfo item = 1;
  if (this->_internal_has_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::item(this),
        _Internal::item(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_DROP_ITEM)
  return target;
}

size_t C_DROP_ITEM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_DROP_ITEM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.ItemInfo item = 1;
  if (this->_internal_has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_DROP_ITEM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_DROP_ITEM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_DROP_ITEM::GetClassData() const { return &_class_data_; }


void C_DROP_ITEM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_DROP_ITEM*>(&to_msg);
  auto& from = static_cast<const C_DROP_ITEM&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_DROP_ITEM)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item()) {
    _this->_internal_mutable_item()->::Protocol::ItemInfo::MergeFrom(
        from._internal_item());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_DROP_ITEM::CopyFrom(const C_DROP_ITEM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_DROP_ITEM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_DROP_ITEM::IsInitialized() const {
  return true;
}

void C_DROP_ITEM::InternalSwap(C_DROP_ITEM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.item_, other->_impl_.item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_DROP_ITEM::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[24]);
}

// ===================================================================

class C_ADD_ITEM::_Internal {
 public:
};

C_ADD_ITEM::C_ADD_ITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_ADD_ITEM)
}
C_ADD_ITEM::C_ADD_ITEM(const C_ADD_ITEM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_ADD_ITEM* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.item_id_ = from._impl_.item_id_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_ADD_ITEM)
}

inline void C_ADD_ITEM::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_ADD_ITEM::~C_ADD_ITEM() {
  // @@protoc_insertion_point(destructor:Protocol.C_ADD_ITEM)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_ADD_ITEM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_ADD_ITEM::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_ADD_ITEM::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_ADD_ITEM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_ADD_ITEM::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_ADD_ITEM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_ADD_ITEM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 item_id = 1;
  if (this->_internal_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_ADD_ITEM)
  return target;
}

size_t C_ADD_ITEM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_ADD_ITEM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 item_id = 1;
  if (this->_internal_item_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_ADD_ITEM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_ADD_ITEM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_ADD_ITEM::GetClassData() const { return &_class_data_; }


void C_ADD_ITEM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_ADD_ITEM*>(&to_msg);
  auto& from = static_cast<const C_ADD_ITEM&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_ADD_ITEM)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_item_id() != 0) {
    _this->_internal_set_item_id(from._internal_item_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_ADD_ITEM::CopyFrom(const C_ADD_ITEM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_ADD_ITEM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_ADD_ITEM::IsInitialized() const {
  return true;
}

void C_ADD_ITEM::InternalSwap(C_ADD_ITEM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.item_id_, other->_impl_.item_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_ADD_ITEM::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[25]);
}

// ===================================================================

class S_ADD_ITEM::_Internal {
 public:
};

void S_ADD_ITEM::clear_items() {
  _impl_.items_.Clear();
}
S_ADD_ITEM::S_ADD_ITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ADD_ITEM)
}
S_ADD_ITEM::S_ADD_ITEM(const S_ADD_ITEM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_ADD_ITEM* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ADD_ITEM)
}

inline void S_ADD_ITEM::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_ADD_ITEM::~S_ADD_ITEM() {
  // @@protoc_insertion_point(destructor:Protocol.S_ADD_ITEM)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ADD_ITEM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void S_ADD_ITEM::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_ADD_ITEM::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ADD_ITEM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ADD_ITEM::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protocol.ItemInfo items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ADD_ITEM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ADD_ITEM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protocol.ItemInfo items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ADD_ITEM)
  return target;
}

size_t S_ADD_ITEM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ADD_ITEM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.ItemInfo items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ADD_ITEM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_ADD_ITEM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ADD_ITEM::GetClassData() const { return &_class_data_; }


void S_ADD_ITEM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_ADD_ITEM*>(&to_msg);
  auto& from = static_cast<const S_ADD_ITEM&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ADD_ITEM)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ADD_ITEM::CopyFrom(const S_ADD_ITEM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ADD_ITEM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ADD_ITEM::IsInitialized() const {
  return true;
}

void S_ADD_ITEM::InternalSwap(S_ADD_ITEM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ADD_ITEM::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[26]);
}

// ===================================================================

class C_USE_ITEM::_Internal {
 public:
};

C_USE_ITEM::C_USE_ITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_USE_ITEM)
}
C_USE_ITEM::C_USE_ITEM(const C_USE_ITEM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_USE_ITEM* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.item_ = from._impl_.item_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_USE_ITEM)
}

inline void C_USE_ITEM::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_USE_ITEM::~C_USE_ITEM() {
  // @@protoc_insertion_point(destructor:Protocol.C_USE_ITEM)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_USE_ITEM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_USE_ITEM::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_USE_ITEM::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_USE_ITEM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_USE_ITEM::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.ItemType item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_item(static_cast<::Protocol::ItemType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_USE_ITEM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_USE_ITEM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.ItemType item = 1;
  if (this->_internal_item() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_item(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_USE_ITEM)
  return target;
}

size_t C_USE_ITEM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_USE_ITEM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.ItemType item = 1;
  if (this->_internal_item() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_item());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_USE_ITEM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_USE_ITEM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_USE_ITEM::GetClassData() const { return &_class_data_; }


void C_USE_ITEM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_USE_ITEM*>(&to_msg);
  auto& from = static_cast<const C_USE_ITEM&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_USE_ITEM)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_item() != 0) {
    _this->_internal_set_item(from._internal_item());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_USE_ITEM::CopyFrom(const C_USE_ITEM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_USE_ITEM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_USE_ITEM::IsInitialized() const {
  return true;
}

void C_USE_ITEM::InternalSwap(C_USE_ITEM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.item_, other->_impl_.item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_USE_ITEM::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[27]);
}

// ===================================================================

class S_USE_ITEM::_Internal {
 public:
};

S_USE_ITEM::S_USE_ITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_USE_ITEM)
}
S_USE_ITEM::S_USE_ITEM(const S_USE_ITEM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_USE_ITEM* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.hp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hp_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.hp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_USE_ITEM)
}

inline void S_USE_ITEM::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){uint64_t{0u}}
    , decltype(_impl_.hp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_USE_ITEM::~S_USE_ITEM() {
  // @@protoc_insertion_point(destructor:Protocol.S_USE_ITEM)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_USE_ITEM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_USE_ITEM::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_USE_ITEM::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_USE_ITEM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.hp_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.hp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_USE_ITEM::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_USE_ITEM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_USE_ITEM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_object_id(), target);
  }

  // int32 hp = 2;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_hp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_USE_ITEM)
  return target;
}

size_t S_USE_ITEM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_USE_ITEM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_object_id());
  }

  // int32 hp = 2;
  if (this->_internal_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_USE_ITEM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_USE_ITEM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_USE_ITEM::GetClassData() const { return &_class_data_; }


void S_USE_ITEM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_USE_ITEM*>(&to_msg);
  auto& from = static_cast<const S_USE_ITEM&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_USE_ITEM)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_hp() != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_USE_ITEM::CopyFrom(const S_USE_ITEM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_USE_ITEM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_USE_ITEM::IsInitialized() const {
  return true;
}

void S_USE_ITEM::InternalSwap(S_USE_ITEM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_USE_ITEM, _impl_.hp_)
      + sizeof(S_USE_ITEM::_impl_.hp_)
      - PROTOBUF_FIELD_OFFSET(S_USE_ITEM, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_USE_ITEM::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[28]);
}

// ===================================================================

class C_PING::_Internal {
 public:
};

C_PING::C_PING(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.C_PING)
}
C_PING::C_PING(const C_PING& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  C_PING* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_PING)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_PING::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_PING::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata C_PING::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[29]);
}

// ===================================================================

class S_PONG::_Internal {
 public:
};

S_PONG::S_PONG(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.S_PONG)
}
S_PONG::S_PONG(const S_PONG& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  S_PONG* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_PONG)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_PONG::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_PONG::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata S_PONG::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[30]);
}

// ===================================================================

class C_CHAT::_Internal {
 public:
};

C_CHAT::C_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_CHAT)
}
C_CHAT::C_CHAT(const C_CHAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_CHAT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_CHAT)
}

inline void C_CHAT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_CHAT::~C_CHAT() {
  // @@protoc_insertion_point(destructor:Protocol.C_CHAT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_CHAT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
}

void C_CHAT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_CHAT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_CHAT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_CHAT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_CHAT.msg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_CHAT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_CHAT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_CHAT.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_CHAT)
  return target;
}

size_t C_CHAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_CHAT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_CHAT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_CHAT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_CHAT::GetClassData() const { return &_class_data_; }


void C_CHAT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_CHAT*>(&to_msg);
  auto& from = static_cast<const C_CHAT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_CHAT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_CHAT::CopyFrom(const C_CHAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_CHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_CHAT::IsInitialized() const {
  return true;
}

void C_CHAT::InternalSwap(C_CHAT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_CHAT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[31]);
}

// ===================================================================

class S_CHAT::_Internal {
 public:
};

S_CHAT::S_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_CHAT)
}
S_CHAT::S_CHAT(const S_CHAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_CHAT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.playerid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.playerid_ = from._impl_.playerid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_CHAT)
}

inline void S_CHAT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.playerid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_CHAT::~S_CHAT() {
  // @@protoc_insertion_point(destructor:Protocol.S_CHAT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_CHAT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
}

void S_CHAT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_CHAT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_CHAT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  _impl_.playerid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CHAT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_CHAT.msg"));
        } else
          goto handle_unusual;
        continue;
      // uint64 playerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_CHAT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_CHAT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_CHAT.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  // uint64 playerId = 2;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_CHAT)
  return target;
}

size_t S_CHAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_CHAT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // uint64 playerId = 2;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_playerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_CHAT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_CHAT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_CHAT::GetClassData() const { return &_class_data_; }


void S_CHAT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_CHAT*>(&to_msg);
  auto& from = static_cast<const S_CHAT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_CHAT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_CHAT::CopyFrom(const S_CHAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_CHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CHAT::IsInitialized() const {
  return true;
}

void S_CHAT::InternalSwap(S_CHAT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  swap(_impl_.playerid_, other->_impl_.playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CHAT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[32]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::C_LOGIN*
Arena::CreateMaybeMessage< ::Protocol::C_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_LOGIN*
Arena::CreateMaybeMessage< ::Protocol::S_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_CREATE_NEW_PLAYER*
Arena::CreateMaybeMessage< ::Protocol::C_CREATE_NEW_PLAYER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_CREATE_NEW_PLAYER >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_ENTER_GAME*
Arena::CreateMaybeMessage< ::Protocol::C_ENTER_GAME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_ENTER_GAME >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ENTER_GAME*
Arena::CreateMaybeMessage< ::Protocol::S_ENTER_GAME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ENTER_GAME >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_LEAVE_GAME*
Arena::CreateMaybeMessage< ::Protocol::C_LEAVE_GAME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_LEAVE_GAME >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_LEAVE_GAME*
Arena::CreateMaybeMessage< ::Protocol::S_LEAVE_GAME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_LEAVE_GAME >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_SPAWN*
Arena::CreateMaybeMessage< ::Protocol::S_SPAWN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_SPAWN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_DESPAWN*
Arena::CreateMaybeMessage< ::Protocol::S_DESPAWN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_DESPAWN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_CHANGE_LEVEL*
Arena::CreateMaybeMessage< ::Protocol::C_CHANGE_LEVEL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_CHANGE_LEVEL >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_MOVE*
Arena::CreateMaybeMessage< ::Protocol::C_MOVE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_MOVE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_MOVE*
Arena::CreateMaybeMessage< ::Protocol::S_MOVE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_MOVE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_LOOK*
Arena::CreateMaybeMessage< ::Protocol::C_LOOK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_LOOK >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_LOOK*
Arena::CreateMaybeMessage< ::Protocol::S_LOOK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_LOOK >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_ANIMATION*
Arena::CreateMaybeMessage< ::Protocol::C_ANIMATION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_ANIMATION >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ANIMATION*
Arena::CreateMaybeMessage< ::Protocol::S_ANIMATION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ANIMATION >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_ATTACK*
Arena::CreateMaybeMessage< ::Protocol::C_ATTACK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_ATTACK >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ATTACK*
Arena::CreateMaybeMessage< ::Protocol::S_ATTACK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ATTACK >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_THINK*
Arena::CreateMaybeMessage< ::Protocol::C_THINK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_THINK >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_THINK*
Arena::CreateMaybeMessage< ::Protocol::S_THINK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_THINK >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_THINK_DONE*
Arena::CreateMaybeMessage< ::Protocol::S_THINK_DONE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_THINK_DONE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_SPAWN_PARTICLE*
Arena::CreateMaybeMessage< ::Protocol::C_SPAWN_PARTICLE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_SPAWN_PARTICLE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_SPAWN_PARTICLE*
Arena::CreateMaybeMessage< ::Protocol::S_SPAWN_PARTICLE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_SPAWN_PARTICLE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_INIT_INVENTORY*
Arena::CreateMaybeMessage< ::Protocol::S_INIT_INVENTORY >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_INIT_INVENTORY >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_DROP_ITEM*
Arena::CreateMaybeMessage< ::Protocol::C_DROP_ITEM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_DROP_ITEM >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_ADD_ITEM*
Arena::CreateMaybeMessage< ::Protocol::C_ADD_ITEM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_ADD_ITEM >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ADD_ITEM*
Arena::CreateMaybeMessage< ::Protocol::S_ADD_ITEM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ADD_ITEM >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_USE_ITEM*
Arena::CreateMaybeMessage< ::Protocol::C_USE_ITEM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_USE_ITEM >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_USE_ITEM*
Arena::CreateMaybeMessage< ::Protocol::S_USE_ITEM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_USE_ITEM >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_PING*
Arena::CreateMaybeMessage< ::Protocol::C_PING >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_PING >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_PONG*
Arena::CreateMaybeMessage< ::Protocol::S_PONG >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_PONG >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_CHAT*
Arena::CreateMaybeMessage< ::Protocol::C_CHAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_CHAT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_CHAT*
Arena::CreateMaybeMessage< ::Protocol::S_CHAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_CHAT >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
