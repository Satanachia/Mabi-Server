// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
#include "Struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace Protocol {
class C_ADD_ITEM;
struct C_ADD_ITEMDefaultTypeInternal;
extern C_ADD_ITEMDefaultTypeInternal _C_ADD_ITEM_default_instance_;
class C_ANIMATION;
struct C_ANIMATIONDefaultTypeInternal;
extern C_ANIMATIONDefaultTypeInternal _C_ANIMATION_default_instance_;
class C_ATTACK;
struct C_ATTACKDefaultTypeInternal;
extern C_ATTACKDefaultTypeInternal _C_ATTACK_default_instance_;
class C_CHANGE_LEVEL;
struct C_CHANGE_LEVELDefaultTypeInternal;
extern C_CHANGE_LEVELDefaultTypeInternal _C_CHANGE_LEVEL_default_instance_;
class C_CHAT;
struct C_CHATDefaultTypeInternal;
extern C_CHATDefaultTypeInternal _C_CHAT_default_instance_;
class C_CREATE_NEW_PLAYER;
struct C_CREATE_NEW_PLAYERDefaultTypeInternal;
extern C_CREATE_NEW_PLAYERDefaultTypeInternal _C_CREATE_NEW_PLAYER_default_instance_;
class C_DROP_ITEM;
struct C_DROP_ITEMDefaultTypeInternal;
extern C_DROP_ITEMDefaultTypeInternal _C_DROP_ITEM_default_instance_;
class C_ENTER_GAME;
struct C_ENTER_GAMEDefaultTypeInternal;
extern C_ENTER_GAMEDefaultTypeInternal _C_ENTER_GAME_default_instance_;
class C_LEAVE_GAME;
struct C_LEAVE_GAMEDefaultTypeInternal;
extern C_LEAVE_GAMEDefaultTypeInternal _C_LEAVE_GAME_default_instance_;
class C_LOGIN;
struct C_LOGINDefaultTypeInternal;
extern C_LOGINDefaultTypeInternal _C_LOGIN_default_instance_;
class C_LOOK;
struct C_LOOKDefaultTypeInternal;
extern C_LOOKDefaultTypeInternal _C_LOOK_default_instance_;
class C_MOVE;
struct C_MOVEDefaultTypeInternal;
extern C_MOVEDefaultTypeInternal _C_MOVE_default_instance_;
class C_PING;
struct C_PINGDefaultTypeInternal;
extern C_PINGDefaultTypeInternal _C_PING_default_instance_;
class C_SPAWN_PARTICLE;
struct C_SPAWN_PARTICLEDefaultTypeInternal;
extern C_SPAWN_PARTICLEDefaultTypeInternal _C_SPAWN_PARTICLE_default_instance_;
class C_THINK;
struct C_THINKDefaultTypeInternal;
extern C_THINKDefaultTypeInternal _C_THINK_default_instance_;
class C_USE_ITEM;
struct C_USE_ITEMDefaultTypeInternal;
extern C_USE_ITEMDefaultTypeInternal _C_USE_ITEM_default_instance_;
class S_ADD_ITEM;
struct S_ADD_ITEMDefaultTypeInternal;
extern S_ADD_ITEMDefaultTypeInternal _S_ADD_ITEM_default_instance_;
class S_ANIMATION;
struct S_ANIMATIONDefaultTypeInternal;
extern S_ANIMATIONDefaultTypeInternal _S_ANIMATION_default_instance_;
class S_ATTACK;
struct S_ATTACKDefaultTypeInternal;
extern S_ATTACKDefaultTypeInternal _S_ATTACK_default_instance_;
class S_CHAT;
struct S_CHATDefaultTypeInternal;
extern S_CHATDefaultTypeInternal _S_CHAT_default_instance_;
class S_DESPAWN;
struct S_DESPAWNDefaultTypeInternal;
extern S_DESPAWNDefaultTypeInternal _S_DESPAWN_default_instance_;
class S_ENTER_GAME;
struct S_ENTER_GAMEDefaultTypeInternal;
extern S_ENTER_GAMEDefaultTypeInternal _S_ENTER_GAME_default_instance_;
class S_INIT_INVENTORY;
struct S_INIT_INVENTORYDefaultTypeInternal;
extern S_INIT_INVENTORYDefaultTypeInternal _S_INIT_INVENTORY_default_instance_;
class S_LEAVE_GAME;
struct S_LEAVE_GAMEDefaultTypeInternal;
extern S_LEAVE_GAMEDefaultTypeInternal _S_LEAVE_GAME_default_instance_;
class S_LOGIN;
struct S_LOGINDefaultTypeInternal;
extern S_LOGINDefaultTypeInternal _S_LOGIN_default_instance_;
class S_LOOK;
struct S_LOOKDefaultTypeInternal;
extern S_LOOKDefaultTypeInternal _S_LOOK_default_instance_;
class S_MOVE;
struct S_MOVEDefaultTypeInternal;
extern S_MOVEDefaultTypeInternal _S_MOVE_default_instance_;
class S_PONG;
struct S_PONGDefaultTypeInternal;
extern S_PONGDefaultTypeInternal _S_PONG_default_instance_;
class S_SPAWN;
struct S_SPAWNDefaultTypeInternal;
extern S_SPAWNDefaultTypeInternal _S_SPAWN_default_instance_;
class S_SPAWN_PARTICLE;
struct S_SPAWN_PARTICLEDefaultTypeInternal;
extern S_SPAWN_PARTICLEDefaultTypeInternal _S_SPAWN_PARTICLE_default_instance_;
class S_THINK;
struct S_THINKDefaultTypeInternal;
extern S_THINKDefaultTypeInternal _S_THINK_default_instance_;
class S_THINK_DONE;
struct S_THINK_DONEDefaultTypeInternal;
extern S_THINK_DONEDefaultTypeInternal _S_THINK_DONE_default_instance_;
class S_USE_ITEM;
struct S_USE_ITEMDefaultTypeInternal;
extern S_USE_ITEMDefaultTypeInternal _S_USE_ITEM_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C_ADD_ITEM* Arena::CreateMaybeMessage<::Protocol::C_ADD_ITEM>(Arena*);
template<> ::Protocol::C_ANIMATION* Arena::CreateMaybeMessage<::Protocol::C_ANIMATION>(Arena*);
template<> ::Protocol::C_ATTACK* Arena::CreateMaybeMessage<::Protocol::C_ATTACK>(Arena*);
template<> ::Protocol::C_CHANGE_LEVEL* Arena::CreateMaybeMessage<::Protocol::C_CHANGE_LEVEL>(Arena*);
template<> ::Protocol::C_CHAT* Arena::CreateMaybeMessage<::Protocol::C_CHAT>(Arena*);
template<> ::Protocol::C_CREATE_NEW_PLAYER* Arena::CreateMaybeMessage<::Protocol::C_CREATE_NEW_PLAYER>(Arena*);
template<> ::Protocol::C_DROP_ITEM* Arena::CreateMaybeMessage<::Protocol::C_DROP_ITEM>(Arena*);
template<> ::Protocol::C_ENTER_GAME* Arena::CreateMaybeMessage<::Protocol::C_ENTER_GAME>(Arena*);
template<> ::Protocol::C_LEAVE_GAME* Arena::CreateMaybeMessage<::Protocol::C_LEAVE_GAME>(Arena*);
template<> ::Protocol::C_LOGIN* Arena::CreateMaybeMessage<::Protocol::C_LOGIN>(Arena*);
template<> ::Protocol::C_LOOK* Arena::CreateMaybeMessage<::Protocol::C_LOOK>(Arena*);
template<> ::Protocol::C_MOVE* Arena::CreateMaybeMessage<::Protocol::C_MOVE>(Arena*);
template<> ::Protocol::C_PING* Arena::CreateMaybeMessage<::Protocol::C_PING>(Arena*);
template<> ::Protocol::C_SPAWN_PARTICLE* Arena::CreateMaybeMessage<::Protocol::C_SPAWN_PARTICLE>(Arena*);
template<> ::Protocol::C_THINK* Arena::CreateMaybeMessage<::Protocol::C_THINK>(Arena*);
template<> ::Protocol::C_USE_ITEM* Arena::CreateMaybeMessage<::Protocol::C_USE_ITEM>(Arena*);
template<> ::Protocol::S_ADD_ITEM* Arena::CreateMaybeMessage<::Protocol::S_ADD_ITEM>(Arena*);
template<> ::Protocol::S_ANIMATION* Arena::CreateMaybeMessage<::Protocol::S_ANIMATION>(Arena*);
template<> ::Protocol::S_ATTACK* Arena::CreateMaybeMessage<::Protocol::S_ATTACK>(Arena*);
template<> ::Protocol::S_CHAT* Arena::CreateMaybeMessage<::Protocol::S_CHAT>(Arena*);
template<> ::Protocol::S_DESPAWN* Arena::CreateMaybeMessage<::Protocol::S_DESPAWN>(Arena*);
template<> ::Protocol::S_ENTER_GAME* Arena::CreateMaybeMessage<::Protocol::S_ENTER_GAME>(Arena*);
template<> ::Protocol::S_INIT_INVENTORY* Arena::CreateMaybeMessage<::Protocol::S_INIT_INVENTORY>(Arena*);
template<> ::Protocol::S_LEAVE_GAME* Arena::CreateMaybeMessage<::Protocol::S_LEAVE_GAME>(Arena*);
template<> ::Protocol::S_LOGIN* Arena::CreateMaybeMessage<::Protocol::S_LOGIN>(Arena*);
template<> ::Protocol::S_LOOK* Arena::CreateMaybeMessage<::Protocol::S_LOOK>(Arena*);
template<> ::Protocol::S_MOVE* Arena::CreateMaybeMessage<::Protocol::S_MOVE>(Arena*);
template<> ::Protocol::S_PONG* Arena::CreateMaybeMessage<::Protocol::S_PONG>(Arena*);
template<> ::Protocol::S_SPAWN* Arena::CreateMaybeMessage<::Protocol::S_SPAWN>(Arena*);
template<> ::Protocol::S_SPAWN_PARTICLE* Arena::CreateMaybeMessage<::Protocol::S_SPAWN_PARTICLE>(Arena*);
template<> ::Protocol::S_THINK* Arena::CreateMaybeMessage<::Protocol::S_THINK>(Arena*);
template<> ::Protocol::S_THINK_DONE* Arena::CreateMaybeMessage<::Protocol::S_THINK_DONE>(Arena*);
template<> ::Protocol::S_USE_ITEM* Arena::CreateMaybeMessage<::Protocol::S_USE_ITEM>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class C_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_LOGIN) */ {
 public:
  inline C_LOGIN() : C_LOGIN(nullptr) {}
  ~C_LOGIN() override;
  explicit PROTOBUF_CONSTEXPR C_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_LOGIN(const C_LOGIN& from);
  C_LOGIN(C_LOGIN&& from) noexcept
    : C_LOGIN() {
    *this = ::std::move(from);
  }

  inline C_LOGIN& operator=(const C_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_LOGIN& operator=(C_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_LOGIN* internal_default_instance() {
    return reinterpret_cast<const C_LOGIN*>(
               &_C_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C_LOGIN& a, C_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(C_LOGIN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_LOGIN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_LOGIN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_LOGIN& from) {
    C_LOGIN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_LOGIN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_LOGIN";
  }
  protected:
  explicit C_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoginIdFieldNumber = 1,
    kLoginPwFieldNumber = 2,
    kSignUpFieldNumber = 3,
  };
  // string login_id = 1;
  void clear_login_id();
  const std::string& login_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_login_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_login_id();
  PROTOBUF_NODISCARD std::string* release_login_id();
  void set_allocated_login_id(std::string* login_id);
  private:
  const std::string& _internal_login_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_login_id(const std::string& value);
  std::string* _internal_mutable_login_id();
  public:

  // string login_pw = 2;
  void clear_login_pw();
  const std::string& login_pw() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_login_pw(ArgT0&& arg0, ArgT... args);
  std::string* mutable_login_pw();
  PROTOBUF_NODISCARD std::string* release_login_pw();
  void set_allocated_login_pw(std::string* login_pw);
  private:
  const std::string& _internal_login_pw() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_login_pw(const std::string& value);
  std::string* _internal_mutable_login_pw();
  public:

  // bool sign_up = 3;
  void clear_sign_up();
  bool sign_up() const;
  void set_sign_up(bool value);
  private:
  bool _internal_sign_up() const;
  void _internal_set_sign_up(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr login_pw_;
    bool sign_up_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_LOGIN) */ {
 public:
  inline S_LOGIN() : S_LOGIN(nullptr) {}
  ~S_LOGIN() override;
  explicit PROTOBUF_CONSTEXPR S_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_LOGIN(const S_LOGIN& from);
  S_LOGIN(S_LOGIN&& from) noexcept
    : S_LOGIN() {
    *this = ::std::move(from);
  }

  inline S_LOGIN& operator=(const S_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LOGIN& operator=(S_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_LOGIN* internal_default_instance() {
    return reinterpret_cast<const S_LOGIN*>(
               &_S_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_LOGIN& a, S_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LOGIN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_LOGIN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_LOGIN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_LOGIN& from) {
    S_LOGIN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_LOGIN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_LOGIN";
  }
  protected:
  explicit S_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // repeated .Protocol.ObjectInfo players = 2;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::Protocol::ObjectInfo* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >*
      mutable_players();
  private:
  const ::Protocol::ObjectInfo& _internal_players(int index) const;
  ::Protocol::ObjectInfo* _internal_add_players();
  public:
  const ::Protocol::ObjectInfo& players(int index) const;
  ::Protocol::ObjectInfo* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >&
      players() const;

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo > players_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_CREATE_NEW_PLAYER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_CREATE_NEW_PLAYER) */ {
 public:
  inline C_CREATE_NEW_PLAYER() : C_CREATE_NEW_PLAYER(nullptr) {}
  ~C_CREATE_NEW_PLAYER() override;
  explicit PROTOBUF_CONSTEXPR C_CREATE_NEW_PLAYER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_CREATE_NEW_PLAYER(const C_CREATE_NEW_PLAYER& from);
  C_CREATE_NEW_PLAYER(C_CREATE_NEW_PLAYER&& from) noexcept
    : C_CREATE_NEW_PLAYER() {
    *this = ::std::move(from);
  }

  inline C_CREATE_NEW_PLAYER& operator=(const C_CREATE_NEW_PLAYER& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_CREATE_NEW_PLAYER& operator=(C_CREATE_NEW_PLAYER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_CREATE_NEW_PLAYER& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_CREATE_NEW_PLAYER* internal_default_instance() {
    return reinterpret_cast<const C_CREATE_NEW_PLAYER*>(
               &_C_CREATE_NEW_PLAYER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C_CREATE_NEW_PLAYER& a, C_CREATE_NEW_PLAYER& b) {
    a.Swap(&b);
  }
  inline void Swap(C_CREATE_NEW_PLAYER* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_CREATE_NEW_PLAYER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_CREATE_NEW_PLAYER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_CREATE_NEW_PLAYER>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_CREATE_NEW_PLAYER& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_CREATE_NEW_PLAYER& from) {
    C_CREATE_NEW_PLAYER::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_CREATE_NEW_PLAYER* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_CREATE_NEW_PLAYER";
  }
  protected:
  explicit C_CREATE_NEW_PLAYER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNameFieldNumber = 1,
    kPlayerTypeFieldNumber = 2,
  };
  // string player_name = 1;
  void clear_player_name();
  const std::string& player_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_name();
  PROTOBUF_NODISCARD std::string* release_player_name();
  void set_allocated_player_name(std::string* player_name);
  private:
  const std::string& _internal_player_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_name(const std::string& value);
  std::string* _internal_mutable_player_name();
  public:

  // .Protocol.CreatureType player_type = 2;
  void clear_player_type();
  ::Protocol::CreatureType player_type() const;
  void set_player_type(::Protocol::CreatureType value);
  private:
  ::Protocol::CreatureType _internal_player_type() const;
  void _internal_set_player_type(::Protocol::CreatureType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_CREATE_NEW_PLAYER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_name_;
    int player_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_ENTER_GAME final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_ENTER_GAME) */ {
 public:
  inline C_ENTER_GAME() : C_ENTER_GAME(nullptr) {}
  ~C_ENTER_GAME() override;
  explicit PROTOBUF_CONSTEXPR C_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ENTER_GAME(const C_ENTER_GAME& from);
  C_ENTER_GAME(C_ENTER_GAME&& from) noexcept
    : C_ENTER_GAME() {
    *this = ::std::move(from);
  }

  inline C_ENTER_GAME& operator=(const C_ENTER_GAME& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ENTER_GAME& operator=(C_ENTER_GAME&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ENTER_GAME& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ENTER_GAME* internal_default_instance() {
    return reinterpret_cast<const C_ENTER_GAME*>(
               &_C_ENTER_GAME_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(C_ENTER_GAME& a, C_ENTER_GAME& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ENTER_GAME* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ENTER_GAME* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_ENTER_GAME* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_ENTER_GAME>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_ENTER_GAME& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_ENTER_GAME& from) {
    C_ENTER_GAME::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ENTER_GAME* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_ENTER_GAME";
  }
  protected:
  explicit C_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIndexFieldNumber = 1,
  };
  // int32 playerIndex = 1;
  void clear_playerindex();
  int32_t playerindex() const;
  void set_playerindex(int32_t value);
  private:
  int32_t _internal_playerindex() const;
  void _internal_set_playerindex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_ENTER_GAME)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t playerindex_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ENTER_GAME final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ENTER_GAME) */ {
 public:
  inline S_ENTER_GAME() : S_ENTER_GAME(nullptr) {}
  ~S_ENTER_GAME() override;
  explicit PROTOBUF_CONSTEXPR S_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ENTER_GAME(const S_ENTER_GAME& from);
  S_ENTER_GAME(S_ENTER_GAME&& from) noexcept
    : S_ENTER_GAME() {
    *this = ::std::move(from);
  }

  inline S_ENTER_GAME& operator=(const S_ENTER_GAME& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ENTER_GAME& operator=(S_ENTER_GAME&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ENTER_GAME& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ENTER_GAME* internal_default_instance() {
    return reinterpret_cast<const S_ENTER_GAME*>(
               &_S_ENTER_GAME_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(S_ENTER_GAME& a, S_ENTER_GAME& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ENTER_GAME* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ENTER_GAME* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ENTER_GAME* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ENTER_GAME>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ENTER_GAME& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_ENTER_GAME& from) {
    S_ENTER_GAME::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ENTER_GAME* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ENTER_GAME";
  }
  protected:
  explicit S_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // .Protocol.ObjectInfo player = 2;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::Protocol::ObjectInfo& player() const;
  PROTOBUF_NODISCARD ::Protocol::ObjectInfo* release_player();
  ::Protocol::ObjectInfo* mutable_player();
  void set_allocated_player(::Protocol::ObjectInfo* player);
  private:
  const ::Protocol::ObjectInfo& _internal_player() const;
  ::Protocol::ObjectInfo* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::Protocol::ObjectInfo* player);
  ::Protocol::ObjectInfo* unsafe_arena_release_player();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_ENTER_GAME)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ObjectInfo* player_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_LEAVE_GAME final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C_LEAVE_GAME) */ {
 public:
  inline C_LEAVE_GAME() : C_LEAVE_GAME(nullptr) {}
  explicit PROTOBUF_CONSTEXPR C_LEAVE_GAME(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_LEAVE_GAME(const C_LEAVE_GAME& from);
  C_LEAVE_GAME(C_LEAVE_GAME&& from) noexcept
    : C_LEAVE_GAME() {
    *this = ::std::move(from);
  }

  inline C_LEAVE_GAME& operator=(const C_LEAVE_GAME& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_LEAVE_GAME& operator=(C_LEAVE_GAME&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_LEAVE_GAME& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_LEAVE_GAME* internal_default_instance() {
    return reinterpret_cast<const C_LEAVE_GAME*>(
               &_C_LEAVE_GAME_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(C_LEAVE_GAME& a, C_LEAVE_GAME& b) {
    a.Swap(&b);
  }
  inline void Swap(C_LEAVE_GAME* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_LEAVE_GAME* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_LEAVE_GAME* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_LEAVE_GAME>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C_LEAVE_GAME& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C_LEAVE_GAME& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_LEAVE_GAME";
  }
  protected:
  explicit C_LEAVE_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C_LEAVE_GAME)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_LEAVE_GAME final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.S_LEAVE_GAME) */ {
 public:
  inline S_LEAVE_GAME() : S_LEAVE_GAME(nullptr) {}
  explicit PROTOBUF_CONSTEXPR S_LEAVE_GAME(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_LEAVE_GAME(const S_LEAVE_GAME& from);
  S_LEAVE_GAME(S_LEAVE_GAME&& from) noexcept
    : S_LEAVE_GAME() {
    *this = ::std::move(from);
  }

  inline S_LEAVE_GAME& operator=(const S_LEAVE_GAME& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LEAVE_GAME& operator=(S_LEAVE_GAME&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_LEAVE_GAME& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_LEAVE_GAME* internal_default_instance() {
    return reinterpret_cast<const S_LEAVE_GAME*>(
               &_S_LEAVE_GAME_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(S_LEAVE_GAME& a, S_LEAVE_GAME& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LEAVE_GAME* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LEAVE_GAME* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_LEAVE_GAME* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_LEAVE_GAME>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const S_LEAVE_GAME& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const S_LEAVE_GAME& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_LEAVE_GAME";
  }
  protected:
  explicit S_LEAVE_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.S_LEAVE_GAME)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_SPAWN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_SPAWN) */ {
 public:
  inline S_SPAWN() : S_SPAWN(nullptr) {}
  ~S_SPAWN() override;
  explicit PROTOBUF_CONSTEXPR S_SPAWN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_SPAWN(const S_SPAWN& from);
  S_SPAWN(S_SPAWN&& from) noexcept
    : S_SPAWN() {
    *this = ::std::move(from);
  }

  inline S_SPAWN& operator=(const S_SPAWN& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SPAWN& operator=(S_SPAWN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SPAWN& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SPAWN* internal_default_instance() {
    return reinterpret_cast<const S_SPAWN*>(
               &_S_SPAWN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(S_SPAWN& a, S_SPAWN& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SPAWN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SPAWN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_SPAWN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_SPAWN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_SPAWN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_SPAWN& from) {
    S_SPAWN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SPAWN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_SPAWN";
  }
  protected:
  explicit S_SPAWN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 1,
    kPositionsFieldNumber = 2,
    kLevelFieldNumber = 3,
  };
  // repeated .Protocol.ObjectInfo players = 1;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::Protocol::ObjectInfo* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >*
      mutable_players();
  private:
  const ::Protocol::ObjectInfo& _internal_players(int index) const;
  ::Protocol::ObjectInfo* _internal_add_players();
  public:
  const ::Protocol::ObjectInfo& players(int index) const;
  ::Protocol::ObjectInfo* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >&
      players() const;

  // repeated .Protocol.PosInfo positions = 2;
  int positions_size() const;
  private:
  int _internal_positions_size() const;
  public:
  void clear_positions();
  ::Protocol::PosInfo* mutable_positions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PosInfo >*
      mutable_positions();
  private:
  const ::Protocol::PosInfo& _internal_positions(int index) const;
  ::Protocol::PosInfo* _internal_add_positions();
  public:
  const ::Protocol::PosInfo& positions(int index) const;
  ::Protocol::PosInfo* add_positions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PosInfo >&
      positions() const;

  // .Protocol.LevelType level = 3;
  void clear_level();
  ::Protocol::LevelType level() const;
  void set_level(::Protocol::LevelType value);
  private:
  ::Protocol::LevelType _internal_level() const;
  void _internal_set_level(::Protocol::LevelType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_SPAWN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo > players_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PosInfo > positions_;
    int level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_DESPAWN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_DESPAWN) */ {
 public:
  inline S_DESPAWN() : S_DESPAWN(nullptr) {}
  ~S_DESPAWN() override;
  explicit PROTOBUF_CONSTEXPR S_DESPAWN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_DESPAWN(const S_DESPAWN& from);
  S_DESPAWN(S_DESPAWN&& from) noexcept
    : S_DESPAWN() {
    *this = ::std::move(from);
  }

  inline S_DESPAWN& operator=(const S_DESPAWN& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_DESPAWN& operator=(S_DESPAWN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_DESPAWN& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_DESPAWN* internal_default_instance() {
    return reinterpret_cast<const S_DESPAWN*>(
               &_S_DESPAWN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(S_DESPAWN& a, S_DESPAWN& b) {
    a.Swap(&b);
  }
  inline void Swap(S_DESPAWN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_DESPAWN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_DESPAWN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_DESPAWN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_DESPAWN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_DESPAWN& from) {
    S_DESPAWN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_DESPAWN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_DESPAWN";
  }
  protected:
  explicit S_DESPAWN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdsFieldNumber = 1,
  };
  // repeated uint64 object_ids = 1;
  int object_ids_size() const;
  private:
  int _internal_object_ids_size() const;
  public:
  void clear_object_ids();
  private:
  uint64_t _internal_object_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_object_ids() const;
  void _internal_add_object_ids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_object_ids();
  public:
  uint64_t object_ids(int index) const;
  void set_object_ids(int index, uint64_t value);
  void add_object_ids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      object_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_object_ids();

  // @@protoc_insertion_point(class_scope:Protocol.S_DESPAWN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > object_ids_;
    mutable std::atomic<int> _object_ids_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_CHANGE_LEVEL final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_CHANGE_LEVEL) */ {
 public:
  inline C_CHANGE_LEVEL() : C_CHANGE_LEVEL(nullptr) {}
  ~C_CHANGE_LEVEL() override;
  explicit PROTOBUF_CONSTEXPR C_CHANGE_LEVEL(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_CHANGE_LEVEL(const C_CHANGE_LEVEL& from);
  C_CHANGE_LEVEL(C_CHANGE_LEVEL&& from) noexcept
    : C_CHANGE_LEVEL() {
    *this = ::std::move(from);
  }

  inline C_CHANGE_LEVEL& operator=(const C_CHANGE_LEVEL& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_CHANGE_LEVEL& operator=(C_CHANGE_LEVEL&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_CHANGE_LEVEL& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_CHANGE_LEVEL* internal_default_instance() {
    return reinterpret_cast<const C_CHANGE_LEVEL*>(
               &_C_CHANGE_LEVEL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(C_CHANGE_LEVEL& a, C_CHANGE_LEVEL& b) {
    a.Swap(&b);
  }
  inline void Swap(C_CHANGE_LEVEL* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_CHANGE_LEVEL* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_CHANGE_LEVEL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_CHANGE_LEVEL>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_CHANGE_LEVEL& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_CHANGE_LEVEL& from) {
    C_CHANGE_LEVEL::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_CHANGE_LEVEL* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_CHANGE_LEVEL";
  }
  protected:
  explicit C_CHANGE_LEVEL(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpawnPosFieldNumber = 2,
    kNextLevelFieldNumber = 1,
  };
  // .Protocol.PosInfo spawn_pos = 2;
  bool has_spawn_pos() const;
  private:
  bool _internal_has_spawn_pos() const;
  public:
  void clear_spawn_pos();
  const ::Protocol::PosInfo& spawn_pos() const;
  PROTOBUF_NODISCARD ::Protocol::PosInfo* release_spawn_pos();
  ::Protocol::PosInfo* mutable_spawn_pos();
  void set_allocated_spawn_pos(::Protocol::PosInfo* spawn_pos);
  private:
  const ::Protocol::PosInfo& _internal_spawn_pos() const;
  ::Protocol::PosInfo* _internal_mutable_spawn_pos();
  public:
  void unsafe_arena_set_allocated_spawn_pos(
      ::Protocol::PosInfo* spawn_pos);
  ::Protocol::PosInfo* unsafe_arena_release_spawn_pos();

  // .Protocol.LevelType next_level = 1;
  void clear_next_level();
  ::Protocol::LevelType next_level() const;
  void set_next_level(::Protocol::LevelType value);
  private:
  ::Protocol::LevelType _internal_next_level() const;
  void _internal_set_next_level(::Protocol::LevelType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_CHANGE_LEVEL)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::PosInfo* spawn_pos_;
    int next_level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_MOVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_MOVE) */ {
 public:
  inline C_MOVE() : C_MOVE(nullptr) {}
  ~C_MOVE() override;
  explicit PROTOBUF_CONSTEXPR C_MOVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_MOVE(const C_MOVE& from);
  C_MOVE(C_MOVE&& from) noexcept
    : C_MOVE() {
    *this = ::std::move(from);
  }

  inline C_MOVE& operator=(const C_MOVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_MOVE& operator=(C_MOVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_MOVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_MOVE* internal_default_instance() {
    return reinterpret_cast<const C_MOVE*>(
               &_C_MOVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(C_MOVE& a, C_MOVE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_MOVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_MOVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_MOVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_MOVE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_MOVE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_MOVE& from) {
    C_MOVE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_MOVE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_MOVE";
  }
  protected:
  explicit C_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentPosFieldNumber = 1,
  };
  // .Protocol.PosInfo current_pos = 1;
  bool has_current_pos() const;
  private:
  bool _internal_has_current_pos() const;
  public:
  void clear_current_pos();
  const ::Protocol::PosInfo& current_pos() const;
  PROTOBUF_NODISCARD ::Protocol::PosInfo* release_current_pos();
  ::Protocol::PosInfo* mutable_current_pos();
  void set_allocated_current_pos(::Protocol::PosInfo* current_pos);
  private:
  const ::Protocol::PosInfo& _internal_current_pos() const;
  ::Protocol::PosInfo* _internal_mutable_current_pos();
  public:
  void unsafe_arena_set_allocated_current_pos(
      ::Protocol::PosInfo* current_pos);
  ::Protocol::PosInfo* unsafe_arena_release_current_pos();

  // @@protoc_insertion_point(class_scope:Protocol.C_MOVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::PosInfo* current_pos_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_MOVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_MOVE) */ {
 public:
  inline S_MOVE() : S_MOVE(nullptr) {}
  ~S_MOVE() override;
  explicit PROTOBUF_CONSTEXPR S_MOVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_MOVE(const S_MOVE& from);
  S_MOVE(S_MOVE&& from) noexcept
    : S_MOVE() {
    *this = ::std::move(from);
  }

  inline S_MOVE& operator=(const S_MOVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MOVE& operator=(S_MOVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MOVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MOVE* internal_default_instance() {
    return reinterpret_cast<const S_MOVE*>(
               &_S_MOVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(S_MOVE& a, S_MOVE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MOVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MOVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_MOVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_MOVE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_MOVE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_MOVE& from) {
    S_MOVE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_MOVE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_MOVE";
  }
  protected:
  explicit S_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentPosFieldNumber = 1,
    kObjectIdFieldNumber = 2,
  };
  // .Protocol.PosInfo current_pos = 1;
  bool has_current_pos() const;
  private:
  bool _internal_has_current_pos() const;
  public:
  void clear_current_pos();
  const ::Protocol::PosInfo& current_pos() const;
  PROTOBUF_NODISCARD ::Protocol::PosInfo* release_current_pos();
  ::Protocol::PosInfo* mutable_current_pos();
  void set_allocated_current_pos(::Protocol::PosInfo* current_pos);
  private:
  const ::Protocol::PosInfo& _internal_current_pos() const;
  ::Protocol::PosInfo* _internal_mutable_current_pos();
  public:
  void unsafe_arena_set_allocated_current_pos(
      ::Protocol::PosInfo* current_pos);
  ::Protocol::PosInfo* unsafe_arena_release_current_pos();

  // uint64 object_id = 2;
  void clear_object_id();
  uint64_t object_id() const;
  void set_object_id(uint64_t value);
  private:
  uint64_t _internal_object_id() const;
  void _internal_set_object_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_MOVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::PosInfo* current_pos_;
    uint64_t object_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_LOOK final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_LOOK) */ {
 public:
  inline C_LOOK() : C_LOOK(nullptr) {}
  ~C_LOOK() override;
  explicit PROTOBUF_CONSTEXPR C_LOOK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_LOOK(const C_LOOK& from);
  C_LOOK(C_LOOK&& from) noexcept
    : C_LOOK() {
    *this = ::std::move(from);
  }

  inline C_LOOK& operator=(const C_LOOK& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_LOOK& operator=(C_LOOK&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_LOOK& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_LOOK* internal_default_instance() {
    return reinterpret_cast<const C_LOOK*>(
               &_C_LOOK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(C_LOOK& a, C_LOOK& b) {
    a.Swap(&b);
  }
  inline void Swap(C_LOOK* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_LOOK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_LOOK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_LOOK>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_LOOK& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_LOOK& from) {
    C_LOOK::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_LOOK* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_LOOK";
  }
  protected:
  explicit C_LOOK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLookPosFieldNumber = 1,
    kYawFieldNumber = 2,
  };
  // .Protocol.PosInfo look_pos = 1;
  bool has_look_pos() const;
  private:
  bool _internal_has_look_pos() const;
  public:
  void clear_look_pos();
  const ::Protocol::PosInfo& look_pos() const;
  PROTOBUF_NODISCARD ::Protocol::PosInfo* release_look_pos();
  ::Protocol::PosInfo* mutable_look_pos();
  void set_allocated_look_pos(::Protocol::PosInfo* look_pos);
  private:
  const ::Protocol::PosInfo& _internal_look_pos() const;
  ::Protocol::PosInfo* _internal_mutable_look_pos();
  public:
  void unsafe_arena_set_allocated_look_pos(
      ::Protocol::PosInfo* look_pos);
  ::Protocol::PosInfo* unsafe_arena_release_look_pos();

  // float yaw = 2;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_LOOK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::PosInfo* look_pos_;
    float yaw_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_LOOK final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_LOOK) */ {
 public:
  inline S_LOOK() : S_LOOK(nullptr) {}
  ~S_LOOK() override;
  explicit PROTOBUF_CONSTEXPR S_LOOK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_LOOK(const S_LOOK& from);
  S_LOOK(S_LOOK&& from) noexcept
    : S_LOOK() {
    *this = ::std::move(from);
  }

  inline S_LOOK& operator=(const S_LOOK& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LOOK& operator=(S_LOOK&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_LOOK& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_LOOK* internal_default_instance() {
    return reinterpret_cast<const S_LOOK*>(
               &_S_LOOK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(S_LOOK& a, S_LOOK& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LOOK* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LOOK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_LOOK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_LOOK>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_LOOK& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_LOOK& from) {
    S_LOOK::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_LOOK* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_LOOK";
  }
  protected:
  explicit S_LOOK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLookPosFieldNumber = 3,
    kObjectIdFieldNumber = 1,
    kLookTargetFieldNumber = 2,
    kYawFieldNumber = 4,
  };
  // .Protocol.PosInfo look_pos = 3;
  bool has_look_pos() const;
  private:
  bool _internal_has_look_pos() const;
  public:
  void clear_look_pos();
  const ::Protocol::PosInfo& look_pos() const;
  PROTOBUF_NODISCARD ::Protocol::PosInfo* release_look_pos();
  ::Protocol::PosInfo* mutable_look_pos();
  void set_allocated_look_pos(::Protocol::PosInfo* look_pos);
  private:
  const ::Protocol::PosInfo& _internal_look_pos() const;
  ::Protocol::PosInfo* _internal_mutable_look_pos();
  public:
  void unsafe_arena_set_allocated_look_pos(
      ::Protocol::PosInfo* look_pos);
  ::Protocol::PosInfo* unsafe_arena_release_look_pos();

  // uint64 object_id = 1;
  void clear_object_id();
  uint64_t object_id() const;
  void set_object_id(uint64_t value);
  private:
  uint64_t _internal_object_id() const;
  void _internal_set_object_id(uint64_t value);
  public:

  // uint64 look_target = 2;
  void clear_look_target();
  uint64_t look_target() const;
  void set_look_target(uint64_t value);
  private:
  uint64_t _internal_look_target() const;
  void _internal_set_look_target(uint64_t value);
  public:

  // float yaw = 4;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_LOOK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::PosInfo* look_pos_;
    uint64_t object_id_;
    uint64_t look_target_;
    float yaw_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_ANIMATION final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_ANIMATION) */ {
 public:
  inline C_ANIMATION() : C_ANIMATION(nullptr) {}
  ~C_ANIMATION() override;
  explicit PROTOBUF_CONSTEXPR C_ANIMATION(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ANIMATION(const C_ANIMATION& from);
  C_ANIMATION(C_ANIMATION&& from) noexcept
    : C_ANIMATION() {
    *this = ::std::move(from);
  }

  inline C_ANIMATION& operator=(const C_ANIMATION& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ANIMATION& operator=(C_ANIMATION&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ANIMATION& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ANIMATION* internal_default_instance() {
    return reinterpret_cast<const C_ANIMATION*>(
               &_C_ANIMATION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(C_ANIMATION& a, C_ANIMATION& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ANIMATION* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ANIMATION* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_ANIMATION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_ANIMATION>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_ANIMATION& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_ANIMATION& from) {
    C_ANIMATION::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ANIMATION* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_ANIMATION";
  }
  protected:
  explicit C_ANIMATION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAniTypeFieldNumber = 1,
  };
  // .Protocol.AnimationType ani_type = 1;
  void clear_ani_type();
  ::Protocol::AnimationType ani_type() const;
  void set_ani_type(::Protocol::AnimationType value);
  private:
  ::Protocol::AnimationType _internal_ani_type() const;
  void _internal_set_ani_type(::Protocol::AnimationType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_ANIMATION)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int ani_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ANIMATION final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ANIMATION) */ {
 public:
  inline S_ANIMATION() : S_ANIMATION(nullptr) {}
  ~S_ANIMATION() override;
  explicit PROTOBUF_CONSTEXPR S_ANIMATION(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ANIMATION(const S_ANIMATION& from);
  S_ANIMATION(S_ANIMATION&& from) noexcept
    : S_ANIMATION() {
    *this = ::std::move(from);
  }

  inline S_ANIMATION& operator=(const S_ANIMATION& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ANIMATION& operator=(S_ANIMATION&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ANIMATION& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ANIMATION* internal_default_instance() {
    return reinterpret_cast<const S_ANIMATION*>(
               &_S_ANIMATION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(S_ANIMATION& a, S_ANIMATION& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ANIMATION* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ANIMATION* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ANIMATION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ANIMATION>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ANIMATION& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_ANIMATION& from) {
    S_ANIMATION::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ANIMATION* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ANIMATION";
  }
  protected:
  explicit S_ANIMATION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 2,
    kAniTypeFieldNumber = 1,
  };
  // uint64 object_id = 2;
  void clear_object_id();
  uint64_t object_id() const;
  void set_object_id(uint64_t value);
  private:
  uint64_t _internal_object_id() const;
  void _internal_set_object_id(uint64_t value);
  public:

  // .Protocol.AnimationType ani_type = 1;
  void clear_ani_type();
  ::Protocol::AnimationType ani_type() const;
  void set_ani_type(::Protocol::AnimationType value);
  private:
  ::Protocol::AnimationType _internal_ani_type() const;
  void _internal_set_ani_type(::Protocol::AnimationType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_ANIMATION)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t object_id_;
    int ani_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_ATTACK final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_ATTACK) */ {
 public:
  inline C_ATTACK() : C_ATTACK(nullptr) {}
  ~C_ATTACK() override;
  explicit PROTOBUF_CONSTEXPR C_ATTACK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ATTACK(const C_ATTACK& from);
  C_ATTACK(C_ATTACK&& from) noexcept
    : C_ATTACK() {
    *this = ::std::move(from);
  }

  inline C_ATTACK& operator=(const C_ATTACK& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ATTACK& operator=(C_ATTACK&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ATTACK& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ATTACK* internal_default_instance() {
    return reinterpret_cast<const C_ATTACK*>(
               &_C_ATTACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(C_ATTACK& a, C_ATTACK& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ATTACK* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ATTACK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_ATTACK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_ATTACK>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_ATTACK& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_ATTACK& from) {
    C_ATTACK::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ATTACK* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_ATTACK";
  }
  protected:
  explicit C_ATTACK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetPosFieldNumber = 2,
    kTargetIdFieldNumber = 1,
    kAttackTypeFieldNumber = 3,
  };
  // .Protocol.PosInfo target_pos = 2;
  bool has_target_pos() const;
  private:
  bool _internal_has_target_pos() const;
  public:
  void clear_target_pos();
  const ::Protocol::PosInfo& target_pos() const;
  PROTOBUF_NODISCARD ::Protocol::PosInfo* release_target_pos();
  ::Protocol::PosInfo* mutable_target_pos();
  void set_allocated_target_pos(::Protocol::PosInfo* target_pos);
  private:
  const ::Protocol::PosInfo& _internal_target_pos() const;
  ::Protocol::PosInfo* _internal_mutable_target_pos();
  public:
  void unsafe_arena_set_allocated_target_pos(
      ::Protocol::PosInfo* target_pos);
  ::Protocol::PosInfo* unsafe_arena_release_target_pos();

  // uint64 target_id = 1;
  void clear_target_id();
  uint64_t target_id() const;
  void set_target_id(uint64_t value);
  private:
  uint64_t _internal_target_id() const;
  void _internal_set_target_id(uint64_t value);
  public:

  // .Protocol.AttackType attack_type = 3;
  void clear_attack_type();
  ::Protocol::AttackType attack_type() const;
  void set_attack_type(::Protocol::AttackType value);
  private:
  ::Protocol::AttackType _internal_attack_type() const;
  void _internal_set_attack_type(::Protocol::AttackType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_ATTACK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::PosInfo* target_pos_;
    uint64_t target_id_;
    int attack_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ATTACK final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ATTACK) */ {
 public:
  inline S_ATTACK() : S_ATTACK(nullptr) {}
  ~S_ATTACK() override;
  explicit PROTOBUF_CONSTEXPR S_ATTACK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ATTACK(const S_ATTACK& from);
  S_ATTACK(S_ATTACK&& from) noexcept
    : S_ATTACK() {
    *this = ::std::move(from);
  }

  inline S_ATTACK& operator=(const S_ATTACK& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ATTACK& operator=(S_ATTACK&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ATTACK& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ATTACK* internal_default_instance() {
    return reinterpret_cast<const S_ATTACK*>(
               &_S_ATTACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(S_ATTACK& a, S_ATTACK& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ATTACK* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ATTACK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ATTACK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ATTACK>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ATTACK& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_ATTACK& from) {
    S_ATTACK::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ATTACK* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ATTACK";
  }
  protected:
  explicit S_ATTACK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVictimIdFieldNumber = 1,
    kHpFieldNumber = 2,
  };
  // uint64 victim_id = 1;
  void clear_victim_id();
  uint64_t victim_id() const;
  void set_victim_id(uint64_t value);
  private:
  uint64_t _internal_victim_id() const;
  void _internal_set_victim_id(uint64_t value);
  public:

  // int32 hp = 2;
  void clear_hp();
  int32_t hp() const;
  void set_hp(int32_t value);
  private:
  int32_t _internal_hp() const;
  void _internal_set_hp(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_ATTACK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t victim_id_;
    int32_t hp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_THINK final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_THINK) */ {
 public:
  inline C_THINK() : C_THINK(nullptr) {}
  ~C_THINK() override;
  explicit PROTOBUF_CONSTEXPR C_THINK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_THINK(const C_THINK& from);
  C_THINK(C_THINK&& from) noexcept
    : C_THINK() {
    *this = ::std::move(from);
  }

  inline C_THINK& operator=(const C_THINK& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_THINK& operator=(C_THINK&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_THINK& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_THINK* internal_default_instance() {
    return reinterpret_cast<const C_THINK*>(
               &_C_THINK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(C_THINK& a, C_THINK& b) {
    a.Swap(&b);
  }
  inline void Swap(C_THINK* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_THINK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_THINK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_THINK>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_THINK& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_THINK& from) {
    C_THINK::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_THINK* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_THINK";
  }
  protected:
  explicit C_THINK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttackTypeFieldNumber = 1,
  };
  // .Protocol.AttackType attack_type = 1;
  void clear_attack_type();
  ::Protocol::AttackType attack_type() const;
  void set_attack_type(::Protocol::AttackType value);
  private:
  ::Protocol::AttackType _internal_attack_type() const;
  void _internal_set_attack_type(::Protocol::AttackType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_THINK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int attack_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_THINK final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_THINK) */ {
 public:
  inline S_THINK() : S_THINK(nullptr) {}
  ~S_THINK() override;
  explicit PROTOBUF_CONSTEXPR S_THINK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_THINK(const S_THINK& from);
  S_THINK(S_THINK&& from) noexcept
    : S_THINK() {
    *this = ::std::move(from);
  }

  inline S_THINK& operator=(const S_THINK& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_THINK& operator=(S_THINK&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_THINK& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_THINK* internal_default_instance() {
    return reinterpret_cast<const S_THINK*>(
               &_S_THINK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(S_THINK& a, S_THINK& b) {
    a.Swap(&b);
  }
  inline void Swap(S_THINK* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_THINK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_THINK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_THINK>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_THINK& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_THINK& from) {
    S_THINK::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_THINK* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_THINK";
  }
  protected:
  explicit S_THINK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 2,
    kAttackTypeFieldNumber = 1,
  };
  // uint64 object_id = 2;
  void clear_object_id();
  uint64_t object_id() const;
  void set_object_id(uint64_t value);
  private:
  uint64_t _internal_object_id() const;
  void _internal_set_object_id(uint64_t value);
  public:

  // .Protocol.AttackType attack_type = 1;
  void clear_attack_type();
  ::Protocol::AttackType attack_type() const;
  void set_attack_type(::Protocol::AttackType value);
  private:
  ::Protocol::AttackType _internal_attack_type() const;
  void _internal_set_attack_type(::Protocol::AttackType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_THINK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t object_id_;
    int attack_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_THINK_DONE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_THINK_DONE) */ {
 public:
  inline S_THINK_DONE() : S_THINK_DONE(nullptr) {}
  ~S_THINK_DONE() override;
  explicit PROTOBUF_CONSTEXPR S_THINK_DONE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_THINK_DONE(const S_THINK_DONE& from);
  S_THINK_DONE(S_THINK_DONE&& from) noexcept
    : S_THINK_DONE() {
    *this = ::std::move(from);
  }

  inline S_THINK_DONE& operator=(const S_THINK_DONE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_THINK_DONE& operator=(S_THINK_DONE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_THINK_DONE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_THINK_DONE* internal_default_instance() {
    return reinterpret_cast<const S_THINK_DONE*>(
               &_S_THINK_DONE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(S_THINK_DONE& a, S_THINK_DONE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_THINK_DONE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_THINK_DONE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_THINK_DONE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_THINK_DONE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_THINK_DONE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_THINK_DONE& from) {
    S_THINK_DONE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_THINK_DONE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_THINK_DONE";
  }
  protected:
  explicit S_THINK_DONE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 2,
    kAttackTypeFieldNumber = 1,
  };
  // uint64 object_id = 2;
  void clear_object_id();
  uint64_t object_id() const;
  void set_object_id(uint64_t value);
  private:
  uint64_t _internal_object_id() const;
  void _internal_set_object_id(uint64_t value);
  public:

  // .Protocol.AttackType attack_type = 1;
  void clear_attack_type();
  ::Protocol::AttackType attack_type() const;
  void set_attack_type(::Protocol::AttackType value);
  private:
  ::Protocol::AttackType _internal_attack_type() const;
  void _internal_set_attack_type(::Protocol::AttackType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_THINK_DONE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t object_id_;
    int attack_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_SPAWN_PARTICLE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_SPAWN_PARTICLE) */ {
 public:
  inline C_SPAWN_PARTICLE() : C_SPAWN_PARTICLE(nullptr) {}
  ~C_SPAWN_PARTICLE() override;
  explicit PROTOBUF_CONSTEXPR C_SPAWN_PARTICLE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_SPAWN_PARTICLE(const C_SPAWN_PARTICLE& from);
  C_SPAWN_PARTICLE(C_SPAWN_PARTICLE&& from) noexcept
    : C_SPAWN_PARTICLE() {
    *this = ::std::move(from);
  }

  inline C_SPAWN_PARTICLE& operator=(const C_SPAWN_PARTICLE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_SPAWN_PARTICLE& operator=(C_SPAWN_PARTICLE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_SPAWN_PARTICLE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_SPAWN_PARTICLE* internal_default_instance() {
    return reinterpret_cast<const C_SPAWN_PARTICLE*>(
               &_C_SPAWN_PARTICLE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(C_SPAWN_PARTICLE& a, C_SPAWN_PARTICLE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_SPAWN_PARTICLE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_SPAWN_PARTICLE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_SPAWN_PARTICLE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_SPAWN_PARTICLE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_SPAWN_PARTICLE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_SPAWN_PARTICLE& from) {
    C_SPAWN_PARTICLE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_SPAWN_PARTICLE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_SPAWN_PARTICLE";
  }
  protected:
  explicit C_SPAWN_PARTICLE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kYawFieldNumber = 2,
    kParticleTypeFieldNumber = 3,
  };
  // .Protocol.PosInfo position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Protocol::PosInfo& position() const;
  PROTOBUF_NODISCARD ::Protocol::PosInfo* release_position();
  ::Protocol::PosInfo* mutable_position();
  void set_allocated_position(::Protocol::PosInfo* position);
  private:
  const ::Protocol::PosInfo& _internal_position() const;
  ::Protocol::PosInfo* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Protocol::PosInfo* position);
  ::Protocol::PosInfo* unsafe_arena_release_position();

  // float yaw = 2;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // .Protocol.ParticleType particle_type = 3;
  void clear_particle_type();
  ::Protocol::ParticleType particle_type() const;
  void set_particle_type(::Protocol::ParticleType value);
  private:
  ::Protocol::ParticleType _internal_particle_type() const;
  void _internal_set_particle_type(::Protocol::ParticleType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_SPAWN_PARTICLE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::PosInfo* position_;
    float yaw_;
    int particle_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_SPAWN_PARTICLE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_SPAWN_PARTICLE) */ {
 public:
  inline S_SPAWN_PARTICLE() : S_SPAWN_PARTICLE(nullptr) {}
  ~S_SPAWN_PARTICLE() override;
  explicit PROTOBUF_CONSTEXPR S_SPAWN_PARTICLE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_SPAWN_PARTICLE(const S_SPAWN_PARTICLE& from);
  S_SPAWN_PARTICLE(S_SPAWN_PARTICLE&& from) noexcept
    : S_SPAWN_PARTICLE() {
    *this = ::std::move(from);
  }

  inline S_SPAWN_PARTICLE& operator=(const S_SPAWN_PARTICLE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SPAWN_PARTICLE& operator=(S_SPAWN_PARTICLE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SPAWN_PARTICLE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SPAWN_PARTICLE* internal_default_instance() {
    return reinterpret_cast<const S_SPAWN_PARTICLE*>(
               &_S_SPAWN_PARTICLE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(S_SPAWN_PARTICLE& a, S_SPAWN_PARTICLE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SPAWN_PARTICLE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SPAWN_PARTICLE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_SPAWN_PARTICLE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_SPAWN_PARTICLE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_SPAWN_PARTICLE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_SPAWN_PARTICLE& from) {
    S_SPAWN_PARTICLE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SPAWN_PARTICLE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_SPAWN_PARTICLE";
  }
  protected:
  explicit S_SPAWN_PARTICLE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kLevelFieldNumber = 1,
    kYawFieldNumber = 3,
    kParticleTypeFieldNumber = 4,
  };
  // .Protocol.PosInfo position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Protocol::PosInfo& position() const;
  PROTOBUF_NODISCARD ::Protocol::PosInfo* release_position();
  ::Protocol::PosInfo* mutable_position();
  void set_allocated_position(::Protocol::PosInfo* position);
  private:
  const ::Protocol::PosInfo& _internal_position() const;
  ::Protocol::PosInfo* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Protocol::PosInfo* position);
  ::Protocol::PosInfo* unsafe_arena_release_position();

  // .Protocol.LevelType level = 1;
  void clear_level();
  ::Protocol::LevelType level() const;
  void set_level(::Protocol::LevelType value);
  private:
  ::Protocol::LevelType _internal_level() const;
  void _internal_set_level(::Protocol::LevelType value);
  public:

  // float yaw = 3;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // .Protocol.ParticleType particle_type = 4;
  void clear_particle_type();
  ::Protocol::ParticleType particle_type() const;
  void set_particle_type(::Protocol::ParticleType value);
  private:
  ::Protocol::ParticleType _internal_particle_type() const;
  void _internal_set_particle_type(::Protocol::ParticleType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_SPAWN_PARTICLE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::PosInfo* position_;
    int level_;
    float yaw_;
    int particle_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_INIT_INVENTORY final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_INIT_INVENTORY) */ {
 public:
  inline S_INIT_INVENTORY() : S_INIT_INVENTORY(nullptr) {}
  ~S_INIT_INVENTORY() override;
  explicit PROTOBUF_CONSTEXPR S_INIT_INVENTORY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_INIT_INVENTORY(const S_INIT_INVENTORY& from);
  S_INIT_INVENTORY(S_INIT_INVENTORY&& from) noexcept
    : S_INIT_INVENTORY() {
    *this = ::std::move(from);
  }

  inline S_INIT_INVENTORY& operator=(const S_INIT_INVENTORY& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_INIT_INVENTORY& operator=(S_INIT_INVENTORY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_INIT_INVENTORY& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_INIT_INVENTORY* internal_default_instance() {
    return reinterpret_cast<const S_INIT_INVENTORY*>(
               &_S_INIT_INVENTORY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(S_INIT_INVENTORY& a, S_INIT_INVENTORY& b) {
    a.Swap(&b);
  }
  inline void Swap(S_INIT_INVENTORY* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_INIT_INVENTORY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_INIT_INVENTORY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_INIT_INVENTORY>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_INIT_INVENTORY& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_INIT_INVENTORY& from) {
    S_INIT_INVENTORY::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_INIT_INVENTORY* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_INIT_INVENTORY";
  }
  protected:
  explicit S_INIT_INVENTORY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .Protocol.ItemInfo items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::Protocol::ItemInfo* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemInfo >*
      mutable_items();
  private:
  const ::Protocol::ItemInfo& _internal_items(int index) const;
  ::Protocol::ItemInfo* _internal_add_items();
  public:
  const ::Protocol::ItemInfo& items(int index) const;
  ::Protocol::ItemInfo* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemInfo >&
      items() const;

  // @@protoc_insertion_point(class_scope:Protocol.S_INIT_INVENTORY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemInfo > items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_DROP_ITEM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_DROP_ITEM) */ {
 public:
  inline C_DROP_ITEM() : C_DROP_ITEM(nullptr) {}
  ~C_DROP_ITEM() override;
  explicit PROTOBUF_CONSTEXPR C_DROP_ITEM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_DROP_ITEM(const C_DROP_ITEM& from);
  C_DROP_ITEM(C_DROP_ITEM&& from) noexcept
    : C_DROP_ITEM() {
    *this = ::std::move(from);
  }

  inline C_DROP_ITEM& operator=(const C_DROP_ITEM& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_DROP_ITEM& operator=(C_DROP_ITEM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_DROP_ITEM& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_DROP_ITEM* internal_default_instance() {
    return reinterpret_cast<const C_DROP_ITEM*>(
               &_C_DROP_ITEM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(C_DROP_ITEM& a, C_DROP_ITEM& b) {
    a.Swap(&b);
  }
  inline void Swap(C_DROP_ITEM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_DROP_ITEM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_DROP_ITEM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_DROP_ITEM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_DROP_ITEM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_DROP_ITEM& from) {
    C_DROP_ITEM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_DROP_ITEM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_DROP_ITEM";
  }
  protected:
  explicit C_DROP_ITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
  };
  // .Protocol.ItemInfo item = 1;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::Protocol::ItemInfo& item() const;
  PROTOBUF_NODISCARD ::Protocol::ItemInfo* release_item();
  ::Protocol::ItemInfo* mutable_item();
  void set_allocated_item(::Protocol::ItemInfo* item);
  private:
  const ::Protocol::ItemInfo& _internal_item() const;
  ::Protocol::ItemInfo* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::Protocol::ItemInfo* item);
  ::Protocol::ItemInfo* unsafe_arena_release_item();

  // @@protoc_insertion_point(class_scope:Protocol.C_DROP_ITEM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ItemInfo* item_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_ADD_ITEM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_ADD_ITEM) */ {
 public:
  inline C_ADD_ITEM() : C_ADD_ITEM(nullptr) {}
  ~C_ADD_ITEM() override;
  explicit PROTOBUF_CONSTEXPR C_ADD_ITEM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ADD_ITEM(const C_ADD_ITEM& from);
  C_ADD_ITEM(C_ADD_ITEM&& from) noexcept
    : C_ADD_ITEM() {
    *this = ::std::move(from);
  }

  inline C_ADD_ITEM& operator=(const C_ADD_ITEM& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ADD_ITEM& operator=(C_ADD_ITEM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ADD_ITEM& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ADD_ITEM* internal_default_instance() {
    return reinterpret_cast<const C_ADD_ITEM*>(
               &_C_ADD_ITEM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(C_ADD_ITEM& a, C_ADD_ITEM& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ADD_ITEM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ADD_ITEM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_ADD_ITEM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_ADD_ITEM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_ADD_ITEM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_ADD_ITEM& from) {
    C_ADD_ITEM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ADD_ITEM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_ADD_ITEM";
  }
  protected:
  explicit C_ADD_ITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 1,
  };
  // uint64 item_id = 1;
  void clear_item_id();
  uint64_t item_id() const;
  void set_item_id(uint64_t value);
  private:
  uint64_t _internal_item_id() const;
  void _internal_set_item_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_ADD_ITEM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t item_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ADD_ITEM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ADD_ITEM) */ {
 public:
  inline S_ADD_ITEM() : S_ADD_ITEM(nullptr) {}
  ~S_ADD_ITEM() override;
  explicit PROTOBUF_CONSTEXPR S_ADD_ITEM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ADD_ITEM(const S_ADD_ITEM& from);
  S_ADD_ITEM(S_ADD_ITEM&& from) noexcept
    : S_ADD_ITEM() {
    *this = ::std::move(from);
  }

  inline S_ADD_ITEM& operator=(const S_ADD_ITEM& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ADD_ITEM& operator=(S_ADD_ITEM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ADD_ITEM& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ADD_ITEM* internal_default_instance() {
    return reinterpret_cast<const S_ADD_ITEM*>(
               &_S_ADD_ITEM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(S_ADD_ITEM& a, S_ADD_ITEM& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ADD_ITEM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ADD_ITEM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ADD_ITEM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ADD_ITEM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ADD_ITEM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_ADD_ITEM& from) {
    S_ADD_ITEM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ADD_ITEM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ADD_ITEM";
  }
  protected:
  explicit S_ADD_ITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .Protocol.ItemInfo items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::Protocol::ItemInfo* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemInfo >*
      mutable_items();
  private:
  const ::Protocol::ItemInfo& _internal_items(int index) const;
  ::Protocol::ItemInfo* _internal_add_items();
  public:
  const ::Protocol::ItemInfo& items(int index) const;
  ::Protocol::ItemInfo* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemInfo >&
      items() const;

  // @@protoc_insertion_point(class_scope:Protocol.S_ADD_ITEM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemInfo > items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_USE_ITEM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_USE_ITEM) */ {
 public:
  inline C_USE_ITEM() : C_USE_ITEM(nullptr) {}
  ~C_USE_ITEM() override;
  explicit PROTOBUF_CONSTEXPR C_USE_ITEM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_USE_ITEM(const C_USE_ITEM& from);
  C_USE_ITEM(C_USE_ITEM&& from) noexcept
    : C_USE_ITEM() {
    *this = ::std::move(from);
  }

  inline C_USE_ITEM& operator=(const C_USE_ITEM& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_USE_ITEM& operator=(C_USE_ITEM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_USE_ITEM& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_USE_ITEM* internal_default_instance() {
    return reinterpret_cast<const C_USE_ITEM*>(
               &_C_USE_ITEM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(C_USE_ITEM& a, C_USE_ITEM& b) {
    a.Swap(&b);
  }
  inline void Swap(C_USE_ITEM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_USE_ITEM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_USE_ITEM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_USE_ITEM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_USE_ITEM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_USE_ITEM& from) {
    C_USE_ITEM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_USE_ITEM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_USE_ITEM";
  }
  protected:
  explicit C_USE_ITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
  };
  // .Protocol.ItemType item = 1;
  void clear_item();
  ::Protocol::ItemType item() const;
  void set_item(::Protocol::ItemType value);
  private:
  ::Protocol::ItemType _internal_item() const;
  void _internal_set_item(::Protocol::ItemType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_USE_ITEM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int item_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_USE_ITEM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_USE_ITEM) */ {
 public:
  inline S_USE_ITEM() : S_USE_ITEM(nullptr) {}
  ~S_USE_ITEM() override;
  explicit PROTOBUF_CONSTEXPR S_USE_ITEM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_USE_ITEM(const S_USE_ITEM& from);
  S_USE_ITEM(S_USE_ITEM&& from) noexcept
    : S_USE_ITEM() {
    *this = ::std::move(from);
  }

  inline S_USE_ITEM& operator=(const S_USE_ITEM& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_USE_ITEM& operator=(S_USE_ITEM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_USE_ITEM& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_USE_ITEM* internal_default_instance() {
    return reinterpret_cast<const S_USE_ITEM*>(
               &_S_USE_ITEM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(S_USE_ITEM& a, S_USE_ITEM& b) {
    a.Swap(&b);
  }
  inline void Swap(S_USE_ITEM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_USE_ITEM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_USE_ITEM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_USE_ITEM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_USE_ITEM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_USE_ITEM& from) {
    S_USE_ITEM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_USE_ITEM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_USE_ITEM";
  }
  protected:
  explicit S_USE_ITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
    kHpFieldNumber = 2,
  };
  // uint64 object_id = 1;
  void clear_object_id();
  uint64_t object_id() const;
  void set_object_id(uint64_t value);
  private:
  uint64_t _internal_object_id() const;
  void _internal_set_object_id(uint64_t value);
  public:

  // int32 hp = 2;
  void clear_hp();
  int32_t hp() const;
  void set_hp(int32_t value);
  private:
  int32_t _internal_hp() const;
  void _internal_set_hp(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_USE_ITEM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t object_id_;
    int32_t hp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_PING final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C_PING) */ {
 public:
  inline C_PING() : C_PING(nullptr) {}
  explicit PROTOBUF_CONSTEXPR C_PING(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_PING(const C_PING& from);
  C_PING(C_PING&& from) noexcept
    : C_PING() {
    *this = ::std::move(from);
  }

  inline C_PING& operator=(const C_PING& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_PING& operator=(C_PING&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_PING& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_PING* internal_default_instance() {
    return reinterpret_cast<const C_PING*>(
               &_C_PING_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(C_PING& a, C_PING& b) {
    a.Swap(&b);
  }
  inline void Swap(C_PING* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_PING* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_PING* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_PING>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C_PING& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C_PING& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_PING";
  }
  protected:
  explicit C_PING(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C_PING)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_PONG final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.S_PONG) */ {
 public:
  inline S_PONG() : S_PONG(nullptr) {}
  explicit PROTOBUF_CONSTEXPR S_PONG(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_PONG(const S_PONG& from);
  S_PONG(S_PONG&& from) noexcept
    : S_PONG() {
    *this = ::std::move(from);
  }

  inline S_PONG& operator=(const S_PONG& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_PONG& operator=(S_PONG&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_PONG& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_PONG* internal_default_instance() {
    return reinterpret_cast<const S_PONG*>(
               &_S_PONG_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(S_PONG& a, S_PONG& b) {
    a.Swap(&b);
  }
  inline void Swap(S_PONG* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_PONG* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_PONG* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_PONG>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const S_PONG& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const S_PONG& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_PONG";
  }
  protected:
  explicit S_PONG(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.S_PONG)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_CHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_CHAT) */ {
 public:
  inline C_CHAT() : C_CHAT(nullptr) {}
  ~C_CHAT() override;
  explicit PROTOBUF_CONSTEXPR C_CHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_CHAT(const C_CHAT& from);
  C_CHAT(C_CHAT&& from) noexcept
    : C_CHAT() {
    *this = ::std::move(from);
  }

  inline C_CHAT& operator=(const C_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_CHAT& operator=(C_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_CHAT* internal_default_instance() {
    return reinterpret_cast<const C_CHAT*>(
               &_C_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(C_CHAT& a, C_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_CHAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_CHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_CHAT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_CHAT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_CHAT& from) {
    C_CHAT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_CHAT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_CHAT";
  }
  protected:
  explicit C_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // string msg = 1;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_CHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_CHAT) */ {
 public:
  inline S_CHAT() : S_CHAT(nullptr) {}
  ~S_CHAT() override;
  explicit PROTOBUF_CONSTEXPR S_CHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CHAT(const S_CHAT& from);
  S_CHAT(S_CHAT&& from) noexcept
    : S_CHAT() {
    *this = ::std::move(from);
  }

  inline S_CHAT& operator=(const S_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CHAT& operator=(S_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CHAT* internal_default_instance() {
    return reinterpret_cast<const S_CHAT*>(
               &_S_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(S_CHAT& a, S_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CHAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_CHAT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_CHAT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_CHAT& from) {
    S_CHAT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CHAT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_CHAT";
  }
  protected:
  explicit S_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kPlayerIdFieldNumber = 2,
  };
  // string msg = 1;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // uint64 playerId = 2;
  void clear_playerid();
  uint64_t playerid() const;
  void set_playerid(uint64_t value);
  private:
  uint64_t _internal_playerid() const;
  void _internal_set_playerid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    uint64_t playerid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C_LOGIN

// string login_id = 1;
inline void C_LOGIN::clear_login_id() {
  _impl_.login_id_.ClearToEmpty();
}
inline const std::string& C_LOGIN::login_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C_LOGIN.login_id)
  return _internal_login_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_LOGIN::set_login_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.login_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_LOGIN.login_id)
}
inline std::string* C_LOGIN::mutable_login_id() {
  std::string* _s = _internal_mutable_login_id();
  // @@protoc_insertion_point(field_mutable:Protocol.C_LOGIN.login_id)
  return _s;
}
inline const std::string& C_LOGIN::_internal_login_id() const {
  return _impl_.login_id_.Get();
}
inline void C_LOGIN::_internal_set_login_id(const std::string& value) {
  
  _impl_.login_id_.Set(value, GetArenaForAllocation());
}
inline std::string* C_LOGIN::_internal_mutable_login_id() {
  
  return _impl_.login_id_.Mutable(GetArenaForAllocation());
}
inline std::string* C_LOGIN::release_login_id() {
  // @@protoc_insertion_point(field_release:Protocol.C_LOGIN.login_id)
  return _impl_.login_id_.Release();
}
inline void C_LOGIN::set_allocated_login_id(std::string* login_id) {
  if (login_id != nullptr) {
    
  } else {
    
  }
  _impl_.login_id_.SetAllocated(login_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.login_id_.IsDefault()) {
    _impl_.login_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_LOGIN.login_id)
}

// string login_pw = 2;
inline void C_LOGIN::clear_login_pw() {
  _impl_.login_pw_.ClearToEmpty();
}
inline const std::string& C_LOGIN::login_pw() const {
  // @@protoc_insertion_point(field_get:Protocol.C_LOGIN.login_pw)
  return _internal_login_pw();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_LOGIN::set_login_pw(ArgT0&& arg0, ArgT... args) {
 
 _impl_.login_pw_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_LOGIN.login_pw)
}
inline std::string* C_LOGIN::mutable_login_pw() {
  std::string* _s = _internal_mutable_login_pw();
  // @@protoc_insertion_point(field_mutable:Protocol.C_LOGIN.login_pw)
  return _s;
}
inline const std::string& C_LOGIN::_internal_login_pw() const {
  return _impl_.login_pw_.Get();
}
inline void C_LOGIN::_internal_set_login_pw(const std::string& value) {
  
  _impl_.login_pw_.Set(value, GetArenaForAllocation());
}
inline std::string* C_LOGIN::_internal_mutable_login_pw() {
  
  return _impl_.login_pw_.Mutable(GetArenaForAllocation());
}
inline std::string* C_LOGIN::release_login_pw() {
  // @@protoc_insertion_point(field_release:Protocol.C_LOGIN.login_pw)
  return _impl_.login_pw_.Release();
}
inline void C_LOGIN::set_allocated_login_pw(std::string* login_pw) {
  if (login_pw != nullptr) {
    
  } else {
    
  }
  _impl_.login_pw_.SetAllocated(login_pw, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.login_pw_.IsDefault()) {
    _impl_.login_pw_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_LOGIN.login_pw)
}

// bool sign_up = 3;
inline void C_LOGIN::clear_sign_up() {
  _impl_.sign_up_ = false;
}
inline bool C_LOGIN::_internal_sign_up() const {
  return _impl_.sign_up_;
}
inline bool C_LOGIN::sign_up() const {
  // @@protoc_insertion_point(field_get:Protocol.C_LOGIN.sign_up)
  return _internal_sign_up();
}
inline void C_LOGIN::_internal_set_sign_up(bool value) {
  
  _impl_.sign_up_ = value;
}
inline void C_LOGIN::set_sign_up(bool value) {
  _internal_set_sign_up(value);
  // @@protoc_insertion_point(field_set:Protocol.C_LOGIN.sign_up)
}

// -------------------------------------------------------------------

// S_LOGIN

// bool success = 1;
inline void S_LOGIN::clear_success() {
  _impl_.success_ = false;
}
inline bool S_LOGIN::_internal_success() const {
  return _impl_.success_;
}
inline bool S_LOGIN::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN.success)
  return _internal_success();
}
inline void S_LOGIN::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_LOGIN::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_LOGIN.success)
}

// repeated .Protocol.ObjectInfo players = 2;
inline int S_LOGIN::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int S_LOGIN::players_size() const {
  return _internal_players_size();
}
inline ::Protocol::ObjectInfo* S_LOGIN::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_LOGIN.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >*
S_LOGIN::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_LOGIN.players)
  return &_impl_.players_;
}
inline const ::Protocol::ObjectInfo& S_LOGIN::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::Protocol::ObjectInfo& S_LOGIN::players(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN.players)
  return _internal_players(index);
}
inline ::Protocol::ObjectInfo* S_LOGIN::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::Protocol::ObjectInfo* S_LOGIN::add_players() {
  ::Protocol::ObjectInfo* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:Protocol.S_LOGIN.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >&
S_LOGIN::players() const {
  // @@protoc_insertion_point(field_list:Protocol.S_LOGIN.players)
  return _impl_.players_;
}

// -------------------------------------------------------------------

// C_CREATE_NEW_PLAYER

// string player_name = 1;
inline void C_CREATE_NEW_PLAYER::clear_player_name() {
  _impl_.player_name_.ClearToEmpty();
}
inline const std::string& C_CREATE_NEW_PLAYER::player_name() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CREATE_NEW_PLAYER.player_name)
  return _internal_player_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_CREATE_NEW_PLAYER::set_player_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.player_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_CREATE_NEW_PLAYER.player_name)
}
inline std::string* C_CREATE_NEW_PLAYER::mutable_player_name() {
  std::string* _s = _internal_mutable_player_name();
  // @@protoc_insertion_point(field_mutable:Protocol.C_CREATE_NEW_PLAYER.player_name)
  return _s;
}
inline const std::string& C_CREATE_NEW_PLAYER::_internal_player_name() const {
  return _impl_.player_name_.Get();
}
inline void C_CREATE_NEW_PLAYER::_internal_set_player_name(const std::string& value) {
  
  _impl_.player_name_.Set(value, GetArenaForAllocation());
}
inline std::string* C_CREATE_NEW_PLAYER::_internal_mutable_player_name() {
  
  return _impl_.player_name_.Mutable(GetArenaForAllocation());
}
inline std::string* C_CREATE_NEW_PLAYER::release_player_name() {
  // @@protoc_insertion_point(field_release:Protocol.C_CREATE_NEW_PLAYER.player_name)
  return _impl_.player_name_.Release();
}
inline void C_CREATE_NEW_PLAYER::set_allocated_player_name(std::string* player_name) {
  if (player_name != nullptr) {
    
  } else {
    
  }
  _impl_.player_name_.SetAllocated(player_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.player_name_.IsDefault()) {
    _impl_.player_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_CREATE_NEW_PLAYER.player_name)
}

// .Protocol.CreatureType player_type = 2;
inline void C_CREATE_NEW_PLAYER::clear_player_type() {
  _impl_.player_type_ = 0;
}
inline ::Protocol::CreatureType C_CREATE_NEW_PLAYER::_internal_player_type() const {
  return static_cast< ::Protocol::CreatureType >(_impl_.player_type_);
}
inline ::Protocol::CreatureType C_CREATE_NEW_PLAYER::player_type() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CREATE_NEW_PLAYER.player_type)
  return _internal_player_type();
}
inline void C_CREATE_NEW_PLAYER::_internal_set_player_type(::Protocol::CreatureType value) {
  
  _impl_.player_type_ = value;
}
inline void C_CREATE_NEW_PLAYER::set_player_type(::Protocol::CreatureType value) {
  _internal_set_player_type(value);
  // @@protoc_insertion_point(field_set:Protocol.C_CREATE_NEW_PLAYER.player_type)
}

// -------------------------------------------------------------------

// C_ENTER_GAME

// int32 playerIndex = 1;
inline void C_ENTER_GAME::clear_playerindex() {
  _impl_.playerindex_ = 0;
}
inline int32_t C_ENTER_GAME::_internal_playerindex() const {
  return _impl_.playerindex_;
}
inline int32_t C_ENTER_GAME::playerindex() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ENTER_GAME.playerIndex)
  return _internal_playerindex();
}
inline void C_ENTER_GAME::_internal_set_playerindex(int32_t value) {
  
  _impl_.playerindex_ = value;
}
inline void C_ENTER_GAME::set_playerindex(int32_t value) {
  _internal_set_playerindex(value);
  // @@protoc_insertion_point(field_set:Protocol.C_ENTER_GAME.playerIndex)
}

// -------------------------------------------------------------------

// S_ENTER_GAME

// bool success = 1;
inline void S_ENTER_GAME::clear_success() {
  _impl_.success_ = false;
}
inline bool S_ENTER_GAME::_internal_success() const {
  return _impl_.success_;
}
inline bool S_ENTER_GAME::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ENTER_GAME.success)
  return _internal_success();
}
inline void S_ENTER_GAME::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_ENTER_GAME::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ENTER_GAME.success)
}

// .Protocol.ObjectInfo player = 2;
inline bool S_ENTER_GAME::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool S_ENTER_GAME::has_player() const {
  return _internal_has_player();
}
inline const ::Protocol::ObjectInfo& S_ENTER_GAME::_internal_player() const {
  const ::Protocol::ObjectInfo* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ObjectInfo&>(
      ::Protocol::_ObjectInfo_default_instance_);
}
inline const ::Protocol::ObjectInfo& S_ENTER_GAME::player() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ENTER_GAME.player)
  return _internal_player();
}
inline void S_ENTER_GAME::unsafe_arena_set_allocated_player(
    ::Protocol::ObjectInfo* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ENTER_GAME.player)
}
inline ::Protocol::ObjectInfo* S_ENTER_GAME::release_player() {
  
  ::Protocol::ObjectInfo* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ObjectInfo* S_ENTER_GAME::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:Protocol.S_ENTER_GAME.player)
  
  ::Protocol::ObjectInfo* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::Protocol::ObjectInfo* S_ENTER_GAME::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ObjectInfo>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::Protocol::ObjectInfo* S_ENTER_GAME::mutable_player() {
  ::Protocol::ObjectInfo* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:Protocol.S_ENTER_GAME.player)
  return _msg;
}
inline void S_ENTER_GAME::set_allocated_player(::Protocol::ObjectInfo* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player));
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ENTER_GAME.player)
}

// -------------------------------------------------------------------

// C_LEAVE_GAME

// -------------------------------------------------------------------

// S_LEAVE_GAME

// -------------------------------------------------------------------

// S_SPAWN

// repeated .Protocol.ObjectInfo players = 1;
inline int S_SPAWN::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int S_SPAWN::players_size() const {
  return _internal_players_size();
}
inline ::Protocol::ObjectInfo* S_SPAWN::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_SPAWN.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >*
S_SPAWN::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_SPAWN.players)
  return &_impl_.players_;
}
inline const ::Protocol::ObjectInfo& S_SPAWN::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::Protocol::ObjectInfo& S_SPAWN::players(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_SPAWN.players)
  return _internal_players(index);
}
inline ::Protocol::ObjectInfo* S_SPAWN::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::Protocol::ObjectInfo* S_SPAWN::add_players() {
  ::Protocol::ObjectInfo* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:Protocol.S_SPAWN.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ObjectInfo >&
S_SPAWN::players() const {
  // @@protoc_insertion_point(field_list:Protocol.S_SPAWN.players)
  return _impl_.players_;
}

// repeated .Protocol.PosInfo positions = 2;
inline int S_SPAWN::_internal_positions_size() const {
  return _impl_.positions_.size();
}
inline int S_SPAWN::positions_size() const {
  return _internal_positions_size();
}
inline ::Protocol::PosInfo* S_SPAWN::mutable_positions(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_SPAWN.positions)
  return _impl_.positions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PosInfo >*
S_SPAWN::mutable_positions() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_SPAWN.positions)
  return &_impl_.positions_;
}
inline const ::Protocol::PosInfo& S_SPAWN::_internal_positions(int index) const {
  return _impl_.positions_.Get(index);
}
inline const ::Protocol::PosInfo& S_SPAWN::positions(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_SPAWN.positions)
  return _internal_positions(index);
}
inline ::Protocol::PosInfo* S_SPAWN::_internal_add_positions() {
  return _impl_.positions_.Add();
}
inline ::Protocol::PosInfo* S_SPAWN::add_positions() {
  ::Protocol::PosInfo* _add = _internal_add_positions();
  // @@protoc_insertion_point(field_add:Protocol.S_SPAWN.positions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PosInfo >&
S_SPAWN::positions() const {
  // @@protoc_insertion_point(field_list:Protocol.S_SPAWN.positions)
  return _impl_.positions_;
}

// .Protocol.LevelType level = 3;
inline void S_SPAWN::clear_level() {
  _impl_.level_ = 0;
}
inline ::Protocol::LevelType S_SPAWN::_internal_level() const {
  return static_cast< ::Protocol::LevelType >(_impl_.level_);
}
inline ::Protocol::LevelType S_SPAWN::level() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SPAWN.level)
  return _internal_level();
}
inline void S_SPAWN::_internal_set_level(::Protocol::LevelType value) {
  
  _impl_.level_ = value;
}
inline void S_SPAWN::set_level(::Protocol::LevelType value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SPAWN.level)
}

// -------------------------------------------------------------------

// S_DESPAWN

// repeated uint64 object_ids = 1;
inline int S_DESPAWN::_internal_object_ids_size() const {
  return _impl_.object_ids_.size();
}
inline int S_DESPAWN::object_ids_size() const {
  return _internal_object_ids_size();
}
inline void S_DESPAWN::clear_object_ids() {
  _impl_.object_ids_.Clear();
}
inline uint64_t S_DESPAWN::_internal_object_ids(int index) const {
  return _impl_.object_ids_.Get(index);
}
inline uint64_t S_DESPAWN::object_ids(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_DESPAWN.object_ids)
  return _internal_object_ids(index);
}
inline void S_DESPAWN::set_object_ids(int index, uint64_t value) {
  _impl_.object_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.S_DESPAWN.object_ids)
}
inline void S_DESPAWN::_internal_add_object_ids(uint64_t value) {
  _impl_.object_ids_.Add(value);
}
inline void S_DESPAWN::add_object_ids(uint64_t value) {
  _internal_add_object_ids(value);
  // @@protoc_insertion_point(field_add:Protocol.S_DESPAWN.object_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
S_DESPAWN::_internal_object_ids() const {
  return _impl_.object_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
S_DESPAWN::object_ids() const {
  // @@protoc_insertion_point(field_list:Protocol.S_DESPAWN.object_ids)
  return _internal_object_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
S_DESPAWN::_internal_mutable_object_ids() {
  return &_impl_.object_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
S_DESPAWN::mutable_object_ids() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_DESPAWN.object_ids)
  return _internal_mutable_object_ids();
}

// -------------------------------------------------------------------

// C_CHANGE_LEVEL

// .Protocol.LevelType next_level = 1;
inline void C_CHANGE_LEVEL::clear_next_level() {
  _impl_.next_level_ = 0;
}
inline ::Protocol::LevelType C_CHANGE_LEVEL::_internal_next_level() const {
  return static_cast< ::Protocol::LevelType >(_impl_.next_level_);
}
inline ::Protocol::LevelType C_CHANGE_LEVEL::next_level() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CHANGE_LEVEL.next_level)
  return _internal_next_level();
}
inline void C_CHANGE_LEVEL::_internal_set_next_level(::Protocol::LevelType value) {
  
  _impl_.next_level_ = value;
}
inline void C_CHANGE_LEVEL::set_next_level(::Protocol::LevelType value) {
  _internal_set_next_level(value);
  // @@protoc_insertion_point(field_set:Protocol.C_CHANGE_LEVEL.next_level)
}

// .Protocol.PosInfo spawn_pos = 2;
inline bool C_CHANGE_LEVEL::_internal_has_spawn_pos() const {
  return this != internal_default_instance() && _impl_.spawn_pos_ != nullptr;
}
inline bool C_CHANGE_LEVEL::has_spawn_pos() const {
  return _internal_has_spawn_pos();
}
inline const ::Protocol::PosInfo& C_CHANGE_LEVEL::_internal_spawn_pos() const {
  const ::Protocol::PosInfo* p = _impl_.spawn_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PosInfo&>(
      ::Protocol::_PosInfo_default_instance_);
}
inline const ::Protocol::PosInfo& C_CHANGE_LEVEL::spawn_pos() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CHANGE_LEVEL.spawn_pos)
  return _internal_spawn_pos();
}
inline void C_CHANGE_LEVEL::unsafe_arena_set_allocated_spawn_pos(
    ::Protocol::PosInfo* spawn_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spawn_pos_);
  }
  _impl_.spawn_pos_ = spawn_pos;
  if (spawn_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_CHANGE_LEVEL.spawn_pos)
}
inline ::Protocol::PosInfo* C_CHANGE_LEVEL::release_spawn_pos() {
  
  ::Protocol::PosInfo* temp = _impl_.spawn_pos_;
  _impl_.spawn_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PosInfo* C_CHANGE_LEVEL::unsafe_arena_release_spawn_pos() {
  // @@protoc_insertion_point(field_release:Protocol.C_CHANGE_LEVEL.spawn_pos)
  
  ::Protocol::PosInfo* temp = _impl_.spawn_pos_;
  _impl_.spawn_pos_ = nullptr;
  return temp;
}
inline ::Protocol::PosInfo* C_CHANGE_LEVEL::_internal_mutable_spawn_pos() {
  
  if (_impl_.spawn_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PosInfo>(GetArenaForAllocation());
    _impl_.spawn_pos_ = p;
  }
  return _impl_.spawn_pos_;
}
inline ::Protocol::PosInfo* C_CHANGE_LEVEL::mutable_spawn_pos() {
  ::Protocol::PosInfo* _msg = _internal_mutable_spawn_pos();
  // @@protoc_insertion_point(field_mutable:Protocol.C_CHANGE_LEVEL.spawn_pos)
  return _msg;
}
inline void C_CHANGE_LEVEL::set_allocated_spawn_pos(::Protocol::PosInfo* spawn_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spawn_pos_);
  }
  if (spawn_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spawn_pos));
    if (message_arena != submessage_arena) {
      spawn_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spawn_pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.spawn_pos_ = spawn_pos;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_CHANGE_LEVEL.spawn_pos)
}

// -------------------------------------------------------------------

// C_MOVE

// .Protocol.PosInfo current_pos = 1;
inline bool C_MOVE::_internal_has_current_pos() const {
  return this != internal_default_instance() && _impl_.current_pos_ != nullptr;
}
inline bool C_MOVE::has_current_pos() const {
  return _internal_has_current_pos();
}
inline const ::Protocol::PosInfo& C_MOVE::_internal_current_pos() const {
  const ::Protocol::PosInfo* p = _impl_.current_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PosInfo&>(
      ::Protocol::_PosInfo_default_instance_);
}
inline const ::Protocol::PosInfo& C_MOVE::current_pos() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MOVE.current_pos)
  return _internal_current_pos();
}
inline void C_MOVE::unsafe_arena_set_allocated_current_pos(
    ::Protocol::PosInfo* current_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.current_pos_);
  }
  _impl_.current_pos_ = current_pos;
  if (current_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_MOVE.current_pos)
}
inline ::Protocol::PosInfo* C_MOVE::release_current_pos() {
  
  ::Protocol::PosInfo* temp = _impl_.current_pos_;
  _impl_.current_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PosInfo* C_MOVE::unsafe_arena_release_current_pos() {
  // @@protoc_insertion_point(field_release:Protocol.C_MOVE.current_pos)
  
  ::Protocol::PosInfo* temp = _impl_.current_pos_;
  _impl_.current_pos_ = nullptr;
  return temp;
}
inline ::Protocol::PosInfo* C_MOVE::_internal_mutable_current_pos() {
  
  if (_impl_.current_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PosInfo>(GetArenaForAllocation());
    _impl_.current_pos_ = p;
  }
  return _impl_.current_pos_;
}
inline ::Protocol::PosInfo* C_MOVE::mutable_current_pos() {
  ::Protocol::PosInfo* _msg = _internal_mutable_current_pos();
  // @@protoc_insertion_point(field_mutable:Protocol.C_MOVE.current_pos)
  return _msg;
}
inline void C_MOVE::set_allocated_current_pos(::Protocol::PosInfo* current_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.current_pos_);
  }
  if (current_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_pos));
    if (message_arena != submessage_arena) {
      current_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.current_pos_ = current_pos;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_MOVE.current_pos)
}

// -------------------------------------------------------------------

// S_MOVE

// .Protocol.PosInfo current_pos = 1;
inline bool S_MOVE::_internal_has_current_pos() const {
  return this != internal_default_instance() && _impl_.current_pos_ != nullptr;
}
inline bool S_MOVE::has_current_pos() const {
  return _internal_has_current_pos();
}
inline const ::Protocol::PosInfo& S_MOVE::_internal_current_pos() const {
  const ::Protocol::PosInfo* p = _impl_.current_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PosInfo&>(
      ::Protocol::_PosInfo_default_instance_);
}
inline const ::Protocol::PosInfo& S_MOVE::current_pos() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MOVE.current_pos)
  return _internal_current_pos();
}
inline void S_MOVE::unsafe_arena_set_allocated_current_pos(
    ::Protocol::PosInfo* current_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.current_pos_);
  }
  _impl_.current_pos_ = current_pos;
  if (current_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_MOVE.current_pos)
}
inline ::Protocol::PosInfo* S_MOVE::release_current_pos() {
  
  ::Protocol::PosInfo* temp = _impl_.current_pos_;
  _impl_.current_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PosInfo* S_MOVE::unsafe_arena_release_current_pos() {
  // @@protoc_insertion_point(field_release:Protocol.S_MOVE.current_pos)
  
  ::Protocol::PosInfo* temp = _impl_.current_pos_;
  _impl_.current_pos_ = nullptr;
  return temp;
}
inline ::Protocol::PosInfo* S_MOVE::_internal_mutable_current_pos() {
  
  if (_impl_.current_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PosInfo>(GetArenaForAllocation());
    _impl_.current_pos_ = p;
  }
  return _impl_.current_pos_;
}
inline ::Protocol::PosInfo* S_MOVE::mutable_current_pos() {
  ::Protocol::PosInfo* _msg = _internal_mutable_current_pos();
  // @@protoc_insertion_point(field_mutable:Protocol.S_MOVE.current_pos)
  return _msg;
}
inline void S_MOVE::set_allocated_current_pos(::Protocol::PosInfo* current_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.current_pos_);
  }
  if (current_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_pos));
    if (message_arena != submessage_arena) {
      current_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.current_pos_ = current_pos;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_MOVE.current_pos)
}

// uint64 object_id = 2;
inline void S_MOVE::clear_object_id() {
  _impl_.object_id_ = uint64_t{0u};
}
inline uint64_t S_MOVE::_internal_object_id() const {
  return _impl_.object_id_;
}
inline uint64_t S_MOVE::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MOVE.object_id)
  return _internal_object_id();
}
inline void S_MOVE::_internal_set_object_id(uint64_t value) {
  
  _impl_.object_id_ = value;
}
inline void S_MOVE::set_object_id(uint64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MOVE.object_id)
}

// -------------------------------------------------------------------

// C_LOOK

// .Protocol.PosInfo look_pos = 1;
inline bool C_LOOK::_internal_has_look_pos() const {
  return this != internal_default_instance() && _impl_.look_pos_ != nullptr;
}
inline bool C_LOOK::has_look_pos() const {
  return _internal_has_look_pos();
}
inline const ::Protocol::PosInfo& C_LOOK::_internal_look_pos() const {
  const ::Protocol::PosInfo* p = _impl_.look_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PosInfo&>(
      ::Protocol::_PosInfo_default_instance_);
}
inline const ::Protocol::PosInfo& C_LOOK::look_pos() const {
  // @@protoc_insertion_point(field_get:Protocol.C_LOOK.look_pos)
  return _internal_look_pos();
}
inline void C_LOOK::unsafe_arena_set_allocated_look_pos(
    ::Protocol::PosInfo* look_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.look_pos_);
  }
  _impl_.look_pos_ = look_pos;
  if (look_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_LOOK.look_pos)
}
inline ::Protocol::PosInfo* C_LOOK::release_look_pos() {
  
  ::Protocol::PosInfo* temp = _impl_.look_pos_;
  _impl_.look_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PosInfo* C_LOOK::unsafe_arena_release_look_pos() {
  // @@protoc_insertion_point(field_release:Protocol.C_LOOK.look_pos)
  
  ::Protocol::PosInfo* temp = _impl_.look_pos_;
  _impl_.look_pos_ = nullptr;
  return temp;
}
inline ::Protocol::PosInfo* C_LOOK::_internal_mutable_look_pos() {
  
  if (_impl_.look_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PosInfo>(GetArenaForAllocation());
    _impl_.look_pos_ = p;
  }
  return _impl_.look_pos_;
}
inline ::Protocol::PosInfo* C_LOOK::mutable_look_pos() {
  ::Protocol::PosInfo* _msg = _internal_mutable_look_pos();
  // @@protoc_insertion_point(field_mutable:Protocol.C_LOOK.look_pos)
  return _msg;
}
inline void C_LOOK::set_allocated_look_pos(::Protocol::PosInfo* look_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.look_pos_);
  }
  if (look_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(look_pos));
    if (message_arena != submessage_arena) {
      look_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, look_pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.look_pos_ = look_pos;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_LOOK.look_pos)
}

// float yaw = 2;
inline void C_LOOK::clear_yaw() {
  _impl_.yaw_ = 0;
}
inline float C_LOOK::_internal_yaw() const {
  return _impl_.yaw_;
}
inline float C_LOOK::yaw() const {
  // @@protoc_insertion_point(field_get:Protocol.C_LOOK.yaw)
  return _internal_yaw();
}
inline void C_LOOK::_internal_set_yaw(float value) {
  
  _impl_.yaw_ = value;
}
inline void C_LOOK::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:Protocol.C_LOOK.yaw)
}

// -------------------------------------------------------------------

// S_LOOK

// uint64 object_id = 1;
inline void S_LOOK::clear_object_id() {
  _impl_.object_id_ = uint64_t{0u};
}
inline uint64_t S_LOOK::_internal_object_id() const {
  return _impl_.object_id_;
}
inline uint64_t S_LOOK::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOOK.object_id)
  return _internal_object_id();
}
inline void S_LOOK::_internal_set_object_id(uint64_t value) {
  
  _impl_.object_id_ = value;
}
inline void S_LOOK::set_object_id(uint64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S_LOOK.object_id)
}

// uint64 look_target = 2;
inline void S_LOOK::clear_look_target() {
  _impl_.look_target_ = uint64_t{0u};
}
inline uint64_t S_LOOK::_internal_look_target() const {
  return _impl_.look_target_;
}
inline uint64_t S_LOOK::look_target() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOOK.look_target)
  return _internal_look_target();
}
inline void S_LOOK::_internal_set_look_target(uint64_t value) {
  
  _impl_.look_target_ = value;
}
inline void S_LOOK::set_look_target(uint64_t value) {
  _internal_set_look_target(value);
  // @@protoc_insertion_point(field_set:Protocol.S_LOOK.look_target)
}

// .Protocol.PosInfo look_pos = 3;
inline bool S_LOOK::_internal_has_look_pos() const {
  return this != internal_default_instance() && _impl_.look_pos_ != nullptr;
}
inline bool S_LOOK::has_look_pos() const {
  return _internal_has_look_pos();
}
inline const ::Protocol::PosInfo& S_LOOK::_internal_look_pos() const {
  const ::Protocol::PosInfo* p = _impl_.look_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PosInfo&>(
      ::Protocol::_PosInfo_default_instance_);
}
inline const ::Protocol::PosInfo& S_LOOK::look_pos() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOOK.look_pos)
  return _internal_look_pos();
}
inline void S_LOOK::unsafe_arena_set_allocated_look_pos(
    ::Protocol::PosInfo* look_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.look_pos_);
  }
  _impl_.look_pos_ = look_pos;
  if (look_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_LOOK.look_pos)
}
inline ::Protocol::PosInfo* S_LOOK::release_look_pos() {
  
  ::Protocol::PosInfo* temp = _impl_.look_pos_;
  _impl_.look_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PosInfo* S_LOOK::unsafe_arena_release_look_pos() {
  // @@protoc_insertion_point(field_release:Protocol.S_LOOK.look_pos)
  
  ::Protocol::PosInfo* temp = _impl_.look_pos_;
  _impl_.look_pos_ = nullptr;
  return temp;
}
inline ::Protocol::PosInfo* S_LOOK::_internal_mutable_look_pos() {
  
  if (_impl_.look_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PosInfo>(GetArenaForAllocation());
    _impl_.look_pos_ = p;
  }
  return _impl_.look_pos_;
}
inline ::Protocol::PosInfo* S_LOOK::mutable_look_pos() {
  ::Protocol::PosInfo* _msg = _internal_mutable_look_pos();
  // @@protoc_insertion_point(field_mutable:Protocol.S_LOOK.look_pos)
  return _msg;
}
inline void S_LOOK::set_allocated_look_pos(::Protocol::PosInfo* look_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.look_pos_);
  }
  if (look_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(look_pos));
    if (message_arena != submessage_arena) {
      look_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, look_pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.look_pos_ = look_pos;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_LOOK.look_pos)
}

// float yaw = 4;
inline void S_LOOK::clear_yaw() {
  _impl_.yaw_ = 0;
}
inline float S_LOOK::_internal_yaw() const {
  return _impl_.yaw_;
}
inline float S_LOOK::yaw() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOOK.yaw)
  return _internal_yaw();
}
inline void S_LOOK::_internal_set_yaw(float value) {
  
  _impl_.yaw_ = value;
}
inline void S_LOOK::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:Protocol.S_LOOK.yaw)
}

// -------------------------------------------------------------------

// C_ANIMATION

// .Protocol.AnimationType ani_type = 1;
inline void C_ANIMATION::clear_ani_type() {
  _impl_.ani_type_ = 0;
}
inline ::Protocol::AnimationType C_ANIMATION::_internal_ani_type() const {
  return static_cast< ::Protocol::AnimationType >(_impl_.ani_type_);
}
inline ::Protocol::AnimationType C_ANIMATION::ani_type() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ANIMATION.ani_type)
  return _internal_ani_type();
}
inline void C_ANIMATION::_internal_set_ani_type(::Protocol::AnimationType value) {
  
  _impl_.ani_type_ = value;
}
inline void C_ANIMATION::set_ani_type(::Protocol::AnimationType value) {
  _internal_set_ani_type(value);
  // @@protoc_insertion_point(field_set:Protocol.C_ANIMATION.ani_type)
}

// -------------------------------------------------------------------

// S_ANIMATION

// .Protocol.AnimationType ani_type = 1;
inline void S_ANIMATION::clear_ani_type() {
  _impl_.ani_type_ = 0;
}
inline ::Protocol::AnimationType S_ANIMATION::_internal_ani_type() const {
  return static_cast< ::Protocol::AnimationType >(_impl_.ani_type_);
}
inline ::Protocol::AnimationType S_ANIMATION::ani_type() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ANIMATION.ani_type)
  return _internal_ani_type();
}
inline void S_ANIMATION::_internal_set_ani_type(::Protocol::AnimationType value) {
  
  _impl_.ani_type_ = value;
}
inline void S_ANIMATION::set_ani_type(::Protocol::AnimationType value) {
  _internal_set_ani_type(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ANIMATION.ani_type)
}

// uint64 object_id = 2;
inline void S_ANIMATION::clear_object_id() {
  _impl_.object_id_ = uint64_t{0u};
}
inline uint64_t S_ANIMATION::_internal_object_id() const {
  return _impl_.object_id_;
}
inline uint64_t S_ANIMATION::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ANIMATION.object_id)
  return _internal_object_id();
}
inline void S_ANIMATION::_internal_set_object_id(uint64_t value) {
  
  _impl_.object_id_ = value;
}
inline void S_ANIMATION::set_object_id(uint64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ANIMATION.object_id)
}

// -------------------------------------------------------------------

// C_ATTACK

// uint64 target_id = 1;
inline void C_ATTACK::clear_target_id() {
  _impl_.target_id_ = uint64_t{0u};
}
inline uint64_t C_ATTACK::_internal_target_id() const {
  return _impl_.target_id_;
}
inline uint64_t C_ATTACK::target_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ATTACK.target_id)
  return _internal_target_id();
}
inline void C_ATTACK::_internal_set_target_id(uint64_t value) {
  
  _impl_.target_id_ = value;
}
inline void C_ATTACK::set_target_id(uint64_t value) {
  _internal_set_target_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C_ATTACK.target_id)
}

// .Protocol.PosInfo target_pos = 2;
inline bool C_ATTACK::_internal_has_target_pos() const {
  return this != internal_default_instance() && _impl_.target_pos_ != nullptr;
}
inline bool C_ATTACK::has_target_pos() const {
  return _internal_has_target_pos();
}
inline const ::Protocol::PosInfo& C_ATTACK::_internal_target_pos() const {
  const ::Protocol::PosInfo* p = _impl_.target_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PosInfo&>(
      ::Protocol::_PosInfo_default_instance_);
}
inline const ::Protocol::PosInfo& C_ATTACK::target_pos() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ATTACK.target_pos)
  return _internal_target_pos();
}
inline void C_ATTACK::unsafe_arena_set_allocated_target_pos(
    ::Protocol::PosInfo* target_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_pos_);
  }
  _impl_.target_pos_ = target_pos;
  if (target_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_ATTACK.target_pos)
}
inline ::Protocol::PosInfo* C_ATTACK::release_target_pos() {
  
  ::Protocol::PosInfo* temp = _impl_.target_pos_;
  _impl_.target_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PosInfo* C_ATTACK::unsafe_arena_release_target_pos() {
  // @@protoc_insertion_point(field_release:Protocol.C_ATTACK.target_pos)
  
  ::Protocol::PosInfo* temp = _impl_.target_pos_;
  _impl_.target_pos_ = nullptr;
  return temp;
}
inline ::Protocol::PosInfo* C_ATTACK::_internal_mutable_target_pos() {
  
  if (_impl_.target_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PosInfo>(GetArenaForAllocation());
    _impl_.target_pos_ = p;
  }
  return _impl_.target_pos_;
}
inline ::Protocol::PosInfo* C_ATTACK::mutable_target_pos() {
  ::Protocol::PosInfo* _msg = _internal_mutable_target_pos();
  // @@protoc_insertion_point(field_mutable:Protocol.C_ATTACK.target_pos)
  return _msg;
}
inline void C_ATTACK::set_allocated_target_pos(::Protocol::PosInfo* target_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_pos_);
  }
  if (target_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_pos));
    if (message_arena != submessage_arena) {
      target_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.target_pos_ = target_pos;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_ATTACK.target_pos)
}

// .Protocol.AttackType attack_type = 3;
inline void C_ATTACK::clear_attack_type() {
  _impl_.attack_type_ = 0;
}
inline ::Protocol::AttackType C_ATTACK::_internal_attack_type() const {
  return static_cast< ::Protocol::AttackType >(_impl_.attack_type_);
}
inline ::Protocol::AttackType C_ATTACK::attack_type() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ATTACK.attack_type)
  return _internal_attack_type();
}
inline void C_ATTACK::_internal_set_attack_type(::Protocol::AttackType value) {
  
  _impl_.attack_type_ = value;
}
inline void C_ATTACK::set_attack_type(::Protocol::AttackType value) {
  _internal_set_attack_type(value);
  // @@protoc_insertion_point(field_set:Protocol.C_ATTACK.attack_type)
}

// -------------------------------------------------------------------

// S_ATTACK

// uint64 victim_id = 1;
inline void S_ATTACK::clear_victim_id() {
  _impl_.victim_id_ = uint64_t{0u};
}
inline uint64_t S_ATTACK::_internal_victim_id() const {
  return _impl_.victim_id_;
}
inline uint64_t S_ATTACK::victim_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ATTACK.victim_id)
  return _internal_victim_id();
}
inline void S_ATTACK::_internal_set_victim_id(uint64_t value) {
  
  _impl_.victim_id_ = value;
}
inline void S_ATTACK::set_victim_id(uint64_t value) {
  _internal_set_victim_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ATTACK.victim_id)
}

// int32 hp = 2;
inline void S_ATTACK::clear_hp() {
  _impl_.hp_ = 0;
}
inline int32_t S_ATTACK::_internal_hp() const {
  return _impl_.hp_;
}
inline int32_t S_ATTACK::hp() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ATTACK.hp)
  return _internal_hp();
}
inline void S_ATTACK::_internal_set_hp(int32_t value) {
  
  _impl_.hp_ = value;
}
inline void S_ATTACK::set_hp(int32_t value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ATTACK.hp)
}

// -------------------------------------------------------------------

// C_THINK

// .Protocol.AttackType attack_type = 1;
inline void C_THINK::clear_attack_type() {
  _impl_.attack_type_ = 0;
}
inline ::Protocol::AttackType C_THINK::_internal_attack_type() const {
  return static_cast< ::Protocol::AttackType >(_impl_.attack_type_);
}
inline ::Protocol::AttackType C_THINK::attack_type() const {
  // @@protoc_insertion_point(field_get:Protocol.C_THINK.attack_type)
  return _internal_attack_type();
}
inline void C_THINK::_internal_set_attack_type(::Protocol::AttackType value) {
  
  _impl_.attack_type_ = value;
}
inline void C_THINK::set_attack_type(::Protocol::AttackType value) {
  _internal_set_attack_type(value);
  // @@protoc_insertion_point(field_set:Protocol.C_THINK.attack_type)
}

// -------------------------------------------------------------------

// S_THINK

// .Protocol.AttackType attack_type = 1;
inline void S_THINK::clear_attack_type() {
  _impl_.attack_type_ = 0;
}
inline ::Protocol::AttackType S_THINK::_internal_attack_type() const {
  return static_cast< ::Protocol::AttackType >(_impl_.attack_type_);
}
inline ::Protocol::AttackType S_THINK::attack_type() const {
  // @@protoc_insertion_point(field_get:Protocol.S_THINK.attack_type)
  return _internal_attack_type();
}
inline void S_THINK::_internal_set_attack_type(::Protocol::AttackType value) {
  
  _impl_.attack_type_ = value;
}
inline void S_THINK::set_attack_type(::Protocol::AttackType value) {
  _internal_set_attack_type(value);
  // @@protoc_insertion_point(field_set:Protocol.S_THINK.attack_type)
}

// uint64 object_id = 2;
inline void S_THINK::clear_object_id() {
  _impl_.object_id_ = uint64_t{0u};
}
inline uint64_t S_THINK::_internal_object_id() const {
  return _impl_.object_id_;
}
inline uint64_t S_THINK::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S_THINK.object_id)
  return _internal_object_id();
}
inline void S_THINK::_internal_set_object_id(uint64_t value) {
  
  _impl_.object_id_ = value;
}
inline void S_THINK::set_object_id(uint64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S_THINK.object_id)
}

// -------------------------------------------------------------------

// S_THINK_DONE

// .Protocol.AttackType attack_type = 1;
inline void S_THINK_DONE::clear_attack_type() {
  _impl_.attack_type_ = 0;
}
inline ::Protocol::AttackType S_THINK_DONE::_internal_attack_type() const {
  return static_cast< ::Protocol::AttackType >(_impl_.attack_type_);
}
inline ::Protocol::AttackType S_THINK_DONE::attack_type() const {
  // @@protoc_insertion_point(field_get:Protocol.S_THINK_DONE.attack_type)
  return _internal_attack_type();
}
inline void S_THINK_DONE::_internal_set_attack_type(::Protocol::AttackType value) {
  
  _impl_.attack_type_ = value;
}
inline void S_THINK_DONE::set_attack_type(::Protocol::AttackType value) {
  _internal_set_attack_type(value);
  // @@protoc_insertion_point(field_set:Protocol.S_THINK_DONE.attack_type)
}

// uint64 object_id = 2;
inline void S_THINK_DONE::clear_object_id() {
  _impl_.object_id_ = uint64_t{0u};
}
inline uint64_t S_THINK_DONE::_internal_object_id() const {
  return _impl_.object_id_;
}
inline uint64_t S_THINK_DONE::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S_THINK_DONE.object_id)
  return _internal_object_id();
}
inline void S_THINK_DONE::_internal_set_object_id(uint64_t value) {
  
  _impl_.object_id_ = value;
}
inline void S_THINK_DONE::set_object_id(uint64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S_THINK_DONE.object_id)
}

// -------------------------------------------------------------------

// C_SPAWN_PARTICLE

// .Protocol.PosInfo position = 1;
inline bool C_SPAWN_PARTICLE::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool C_SPAWN_PARTICLE::has_position() const {
  return _internal_has_position();
}
inline const ::Protocol::PosInfo& C_SPAWN_PARTICLE::_internal_position() const {
  const ::Protocol::PosInfo* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PosInfo&>(
      ::Protocol::_PosInfo_default_instance_);
}
inline const ::Protocol::PosInfo& C_SPAWN_PARTICLE::position() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SPAWN_PARTICLE.position)
  return _internal_position();
}
inline void C_SPAWN_PARTICLE::unsafe_arena_set_allocated_position(
    ::Protocol::PosInfo* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_SPAWN_PARTICLE.position)
}
inline ::Protocol::PosInfo* C_SPAWN_PARTICLE::release_position() {
  
  ::Protocol::PosInfo* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PosInfo* C_SPAWN_PARTICLE::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Protocol.C_SPAWN_PARTICLE.position)
  
  ::Protocol::PosInfo* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::Protocol::PosInfo* C_SPAWN_PARTICLE::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PosInfo>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::Protocol::PosInfo* C_SPAWN_PARTICLE::mutable_position() {
  ::Protocol::PosInfo* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:Protocol.C_SPAWN_PARTICLE.position)
  return _msg;
}
inline void C_SPAWN_PARTICLE::set_allocated_position(::Protocol::PosInfo* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_SPAWN_PARTICLE.position)
}

// float yaw = 2;
inline void C_SPAWN_PARTICLE::clear_yaw() {
  _impl_.yaw_ = 0;
}
inline float C_SPAWN_PARTICLE::_internal_yaw() const {
  return _impl_.yaw_;
}
inline float C_SPAWN_PARTICLE::yaw() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SPAWN_PARTICLE.yaw)
  return _internal_yaw();
}
inline void C_SPAWN_PARTICLE::_internal_set_yaw(float value) {
  
  _impl_.yaw_ = value;
}
inline void C_SPAWN_PARTICLE::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:Protocol.C_SPAWN_PARTICLE.yaw)
}

// .Protocol.ParticleType particle_type = 3;
inline void C_SPAWN_PARTICLE::clear_particle_type() {
  _impl_.particle_type_ = 0;
}
inline ::Protocol::ParticleType C_SPAWN_PARTICLE::_internal_particle_type() const {
  return static_cast< ::Protocol::ParticleType >(_impl_.particle_type_);
}
inline ::Protocol::ParticleType C_SPAWN_PARTICLE::particle_type() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SPAWN_PARTICLE.particle_type)
  return _internal_particle_type();
}
inline void C_SPAWN_PARTICLE::_internal_set_particle_type(::Protocol::ParticleType value) {
  
  _impl_.particle_type_ = value;
}
inline void C_SPAWN_PARTICLE::set_particle_type(::Protocol::ParticleType value) {
  _internal_set_particle_type(value);
  // @@protoc_insertion_point(field_set:Protocol.C_SPAWN_PARTICLE.particle_type)
}

// -------------------------------------------------------------------

// S_SPAWN_PARTICLE

// .Protocol.LevelType level = 1;
inline void S_SPAWN_PARTICLE::clear_level() {
  _impl_.level_ = 0;
}
inline ::Protocol::LevelType S_SPAWN_PARTICLE::_internal_level() const {
  return static_cast< ::Protocol::LevelType >(_impl_.level_);
}
inline ::Protocol::LevelType S_SPAWN_PARTICLE::level() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SPAWN_PARTICLE.level)
  return _internal_level();
}
inline void S_SPAWN_PARTICLE::_internal_set_level(::Protocol::LevelType value) {
  
  _impl_.level_ = value;
}
inline void S_SPAWN_PARTICLE::set_level(::Protocol::LevelType value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SPAWN_PARTICLE.level)
}

// .Protocol.PosInfo position = 2;
inline bool S_SPAWN_PARTICLE::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool S_SPAWN_PARTICLE::has_position() const {
  return _internal_has_position();
}
inline const ::Protocol::PosInfo& S_SPAWN_PARTICLE::_internal_position() const {
  const ::Protocol::PosInfo* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::PosInfo&>(
      ::Protocol::_PosInfo_default_instance_);
}
inline const ::Protocol::PosInfo& S_SPAWN_PARTICLE::position() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SPAWN_PARTICLE.position)
  return _internal_position();
}
inline void S_SPAWN_PARTICLE::unsafe_arena_set_allocated_position(
    ::Protocol::PosInfo* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_SPAWN_PARTICLE.position)
}
inline ::Protocol::PosInfo* S_SPAWN_PARTICLE::release_position() {
  
  ::Protocol::PosInfo* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::PosInfo* S_SPAWN_PARTICLE::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Protocol.S_SPAWN_PARTICLE.position)
  
  ::Protocol::PosInfo* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::Protocol::PosInfo* S_SPAWN_PARTICLE::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::PosInfo>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::Protocol::PosInfo* S_SPAWN_PARTICLE::mutable_position() {
  ::Protocol::PosInfo* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:Protocol.S_SPAWN_PARTICLE.position)
  return _msg;
}
inline void S_SPAWN_PARTICLE::set_allocated_position(::Protocol::PosInfo* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_SPAWN_PARTICLE.position)
}

// float yaw = 3;
inline void S_SPAWN_PARTICLE::clear_yaw() {
  _impl_.yaw_ = 0;
}
inline float S_SPAWN_PARTICLE::_internal_yaw() const {
  return _impl_.yaw_;
}
inline float S_SPAWN_PARTICLE::yaw() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SPAWN_PARTICLE.yaw)
  return _internal_yaw();
}
inline void S_SPAWN_PARTICLE::_internal_set_yaw(float value) {
  
  _impl_.yaw_ = value;
}
inline void S_SPAWN_PARTICLE::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SPAWN_PARTICLE.yaw)
}

// .Protocol.ParticleType particle_type = 4;
inline void S_SPAWN_PARTICLE::clear_particle_type() {
  _impl_.particle_type_ = 0;
}
inline ::Protocol::ParticleType S_SPAWN_PARTICLE::_internal_particle_type() const {
  return static_cast< ::Protocol::ParticleType >(_impl_.particle_type_);
}
inline ::Protocol::ParticleType S_SPAWN_PARTICLE::particle_type() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SPAWN_PARTICLE.particle_type)
  return _internal_particle_type();
}
inline void S_SPAWN_PARTICLE::_internal_set_particle_type(::Protocol::ParticleType value) {
  
  _impl_.particle_type_ = value;
}
inline void S_SPAWN_PARTICLE::set_particle_type(::Protocol::ParticleType value) {
  _internal_set_particle_type(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SPAWN_PARTICLE.particle_type)
}

// -------------------------------------------------------------------

// S_INIT_INVENTORY

// repeated .Protocol.ItemInfo items = 1;
inline int S_INIT_INVENTORY::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int S_INIT_INVENTORY::items_size() const {
  return _internal_items_size();
}
inline ::Protocol::ItemInfo* S_INIT_INVENTORY::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_INIT_INVENTORY.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemInfo >*
S_INIT_INVENTORY::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_INIT_INVENTORY.items)
  return &_impl_.items_;
}
inline const ::Protocol::ItemInfo& S_INIT_INVENTORY::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::Protocol::ItemInfo& S_INIT_INVENTORY::items(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_INIT_INVENTORY.items)
  return _internal_items(index);
}
inline ::Protocol::ItemInfo* S_INIT_INVENTORY::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::Protocol::ItemInfo* S_INIT_INVENTORY::add_items() {
  ::Protocol::ItemInfo* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:Protocol.S_INIT_INVENTORY.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemInfo >&
S_INIT_INVENTORY::items() const {
  // @@protoc_insertion_point(field_list:Protocol.S_INIT_INVENTORY.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// C_DROP_ITEM

// .Protocol.ItemInfo item = 1;
inline bool C_DROP_ITEM::_internal_has_item() const {
  return this != internal_default_instance() && _impl_.item_ != nullptr;
}
inline bool C_DROP_ITEM::has_item() const {
  return _internal_has_item();
}
inline const ::Protocol::ItemInfo& C_DROP_ITEM::_internal_item() const {
  const ::Protocol::ItemInfo* p = _impl_.item_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ItemInfo&>(
      ::Protocol::_ItemInfo_default_instance_);
}
inline const ::Protocol::ItemInfo& C_DROP_ITEM::item() const {
  // @@protoc_insertion_point(field_get:Protocol.C_DROP_ITEM.item)
  return _internal_item();
}
inline void C_DROP_ITEM::unsafe_arena_set_allocated_item(
    ::Protocol::ItemInfo* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  _impl_.item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_DROP_ITEM.item)
}
inline ::Protocol::ItemInfo* C_DROP_ITEM::release_item() {
  
  ::Protocol::ItemInfo* temp = _impl_.item_;
  _impl_.item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ItemInfo* C_DROP_ITEM::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:Protocol.C_DROP_ITEM.item)
  
  ::Protocol::ItemInfo* temp = _impl_.item_;
  _impl_.item_ = nullptr;
  return temp;
}
inline ::Protocol::ItemInfo* C_DROP_ITEM::_internal_mutable_item() {
  
  if (_impl_.item_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ItemInfo>(GetArenaForAllocation());
    _impl_.item_ = p;
  }
  return _impl_.item_;
}
inline ::Protocol::ItemInfo* C_DROP_ITEM::mutable_item() {
  ::Protocol::ItemInfo* _msg = _internal_mutable_item();
  // @@protoc_insertion_point(field_mutable:Protocol.C_DROP_ITEM.item)
  return _msg;
}
inline void C_DROP_ITEM::set_allocated_item(::Protocol::ItemInfo* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_);
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item));
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.item_ = item;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_DROP_ITEM.item)
}

// -------------------------------------------------------------------

// C_ADD_ITEM

// uint64 item_id = 1;
inline void C_ADD_ITEM::clear_item_id() {
  _impl_.item_id_ = uint64_t{0u};
}
inline uint64_t C_ADD_ITEM::_internal_item_id() const {
  return _impl_.item_id_;
}
inline uint64_t C_ADD_ITEM::item_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ADD_ITEM.item_id)
  return _internal_item_id();
}
inline void C_ADD_ITEM::_internal_set_item_id(uint64_t value) {
  
  _impl_.item_id_ = value;
}
inline void C_ADD_ITEM::set_item_id(uint64_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:Protocol.C_ADD_ITEM.item_id)
}

// -------------------------------------------------------------------

// S_ADD_ITEM

// repeated .Protocol.ItemInfo items = 1;
inline int S_ADD_ITEM::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int S_ADD_ITEM::items_size() const {
  return _internal_items_size();
}
inline ::Protocol::ItemInfo* S_ADD_ITEM::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_ADD_ITEM.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemInfo >*
S_ADD_ITEM::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_ADD_ITEM.items)
  return &_impl_.items_;
}
inline const ::Protocol::ItemInfo& S_ADD_ITEM::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::Protocol::ItemInfo& S_ADD_ITEM::items(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_ADD_ITEM.items)
  return _internal_items(index);
}
inline ::Protocol::ItemInfo* S_ADD_ITEM::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::Protocol::ItemInfo* S_ADD_ITEM::add_items() {
  ::Protocol::ItemInfo* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:Protocol.S_ADD_ITEM.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ItemInfo >&
S_ADD_ITEM::items() const {
  // @@protoc_insertion_point(field_list:Protocol.S_ADD_ITEM.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// C_USE_ITEM

// .Protocol.ItemType item = 1;
inline void C_USE_ITEM::clear_item() {
  _impl_.item_ = 0;
}
inline ::Protocol::ItemType C_USE_ITEM::_internal_item() const {
  return static_cast< ::Protocol::ItemType >(_impl_.item_);
}
inline ::Protocol::ItemType C_USE_ITEM::item() const {
  // @@protoc_insertion_point(field_get:Protocol.C_USE_ITEM.item)
  return _internal_item();
}
inline void C_USE_ITEM::_internal_set_item(::Protocol::ItemType value) {
  
  _impl_.item_ = value;
}
inline void C_USE_ITEM::set_item(::Protocol::ItemType value) {
  _internal_set_item(value);
  // @@protoc_insertion_point(field_set:Protocol.C_USE_ITEM.item)
}

// -------------------------------------------------------------------

// S_USE_ITEM

// uint64 object_id = 1;
inline void S_USE_ITEM::clear_object_id() {
  _impl_.object_id_ = uint64_t{0u};
}
inline uint64_t S_USE_ITEM::_internal_object_id() const {
  return _impl_.object_id_;
}
inline uint64_t S_USE_ITEM::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S_USE_ITEM.object_id)
  return _internal_object_id();
}
inline void S_USE_ITEM::_internal_set_object_id(uint64_t value) {
  
  _impl_.object_id_ = value;
}
inline void S_USE_ITEM::set_object_id(uint64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S_USE_ITEM.object_id)
}

// int32 hp = 2;
inline void S_USE_ITEM::clear_hp() {
  _impl_.hp_ = 0;
}
inline int32_t S_USE_ITEM::_internal_hp() const {
  return _impl_.hp_;
}
inline int32_t S_USE_ITEM::hp() const {
  // @@protoc_insertion_point(field_get:Protocol.S_USE_ITEM.hp)
  return _internal_hp();
}
inline void S_USE_ITEM::_internal_set_hp(int32_t value) {
  
  _impl_.hp_ = value;
}
inline void S_USE_ITEM::set_hp(int32_t value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:Protocol.S_USE_ITEM.hp)
}

// -------------------------------------------------------------------

// C_PING

// -------------------------------------------------------------------

// S_PONG

// -------------------------------------------------------------------

// C_CHAT

// string msg = 1;
inline void C_CHAT::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& C_CHAT::msg() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CHAT.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_CHAT::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_CHAT.msg)
}
inline std::string* C_CHAT::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Protocol.C_CHAT.msg)
  return _s;
}
inline const std::string& C_CHAT::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void C_CHAT::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* C_CHAT::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* C_CHAT::release_msg() {
  // @@protoc_insertion_point(field_release:Protocol.C_CHAT.msg)
  return _impl_.msg_.Release();
}
inline void C_CHAT::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_CHAT.msg)
}

// -------------------------------------------------------------------

// S_CHAT

// string msg = 1;
inline void S_CHAT::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& S_CHAT::msg() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHAT.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_CHAT::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_CHAT.msg)
}
inline std::string* S_CHAT::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Protocol.S_CHAT.msg)
  return _s;
}
inline const std::string& S_CHAT::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void S_CHAT::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* S_CHAT::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* S_CHAT::release_msg() {
  // @@protoc_insertion_point(field_release:Protocol.S_CHAT.msg)
  return _impl_.msg_.Release();
}
inline void S_CHAT::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_CHAT.msg)
}

// uint64 playerId = 2;
inline void S_CHAT::clear_playerid() {
  _impl_.playerid_ = uint64_t{0u};
}
inline uint64_t S_CHAT::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint64_t S_CHAT::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHAT.playerId)
  return _internal_playerid();
}
inline void S_CHAT::_internal_set_playerid(uint64_t value) {
  
  _impl_.playerid_ = value;
}
inline void S_CHAT::set_playerid(uint64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CHAT.playerId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
