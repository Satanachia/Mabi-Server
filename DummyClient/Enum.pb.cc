// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Enum.proto

#include "Enum.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protocol {
}  // namespace Protocol
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_Enum_2eproto[8];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Enum_2eproto = nullptr;
const uint32_t TableStruct_Enum_2eproto::offsets[1] = {};
static constexpr ::_pbi::MigrationSchema* schemas = nullptr;
static constexpr ::_pb::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_Enum_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nEnum.proto\022\010Protocol*\205\001\n\nObjectType\022\024\n"
  "\020OBJECT_TYPE_NONE\020\000\022\030\n\024OBJECT_TYPE_CREAT"
  "URE\020\001\022\032\n\026OBJECT_TYPE_PROJECTILE\020\002\022\024\n\020OBJ"
  "ECT_TYPE_ITEM\020\003\022\025\n\021OBJECT_TYPE_COUNT\020\004*\353"
  "\001\n\014CreatureType\022\026\n\022CREATURE_TYPE_NONE\020\000\022"
  "\035\n\031CREATURE_TYPE_PLAYER_MAGE\020\001\022 \n\034CREATU"
  "RE_TYPE_PLAYER_WARRIOR\020\002\022\034\n\030CREATURE_TYP"
  "E_PLAYER_ROG\020\003\022\036\n\032CREATURE_TYPE_MONSTER_"
  "IGGY\020\004\022+\n\'CREATURE_TYPE_MONSTER_BOSS_NAM"
  "E_UNKNOWN\020\005\022\027\n\023CREATURE_TYPE_COUNT\020\006*\325\001\n"
  "\rCreatureState\022\027\n\023CREATURE_STATE_NONE\020\000\022"
  "\027\n\023CREATURE_STATE_IDLE\020\001\022\027\n\023CREATURE_STA"
  "TE_MOVE\020\002\022 \n\034CREATURE_STATE_NORMAR_ATTAC"
  "K\020\003\022\034\n\030CREATURE_STATE_HIT_REACT\020\004\022\037\n\033CRE"
  "ATURE_STATE_SKILL_ATTACK\020\005\022\030\n\024CREATURE_S"
  "TATE_COUNT\020\006*u\n\tLevelType\022\023\n\017LEVEL_TYPE_"
  "NONE\020\000\022\033\n\027LEVEL_TYPE_START_BRIDGE\020\001\022 \n\034L"
  "EVEL_TYPE_CASTLE_FRONT_YARD\020\002\022\024\n\020LEVEL_T"
  "YPE_COUNT\020\003*\256\001\n\nAttackType\022\024\n\020ATTACK_TYP"
  "E_NONE\020\000\022\035\n\031ATTACK_TYPE_NORMAL_ATTACK\020\001\022"
  "\032\n\026ATTACK_TYPE_SKILL_MAGE\020\002\022\035\n\031ATTACK_TY"
  "PE_SKILL_WARRIOR\020\003\022\031\n\025ATTACK_TYPE_SKILL_"
  "ROG\020\004\022\025\n\021ATTACK_TYPE_COUNT\020\005*m\n\010ItemType"
  "\022\022\n\016ITEM_TYPE_NONE\020\000\022\030\n\024ITEM_TYPE_HP_POR"
  "TION\020\001\022\036\n\032ITEM_TYPE_LARGE_HP_PORTION\020\002\022\023"
  "\n\017ITEM_TYPE_COUNT\020\003*\217\001\n\014ParticleType\022\026\n\022"
  "PARTICLE_TYPE_NONE\020\000\022\034\n\030PARTICLE_TYPE_MA"
  "GIC_ZONE\020\001\022\027\n\023PARTICLE_TYPE_METEO\020\002\022\027\n\023P"
  "ARTICLE_TYPE_BLINK\020\003\022\027\n\023PARTICLE_TYPE_CO"
  "UNT\020\004*\220\001\n\rAnimationType\022\021\n\rANI_TYPE_NONE"
  "\020\000\022\032\n\026ANI_TYPE_NORMAL_ATTACK\020\001\022\022\n\016ANI_TY"
  "PE_SKILL\020\002\022\024\n\020ANI_TYPE_DAMAGED\020\003\022\022\n\016ANI_"
  "TYPE_DEATH\020\004\022\022\n\016ANI_TYPE_COUNT\020\005b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_Enum_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Enum_2eproto = {
    false, false, 1320, descriptor_table_protodef_Enum_2eproto,
    "Enum.proto",
    &descriptor_table_Enum_2eproto_once, nullptr, 0, 0,
    schemas, file_default_instances, TableStruct_Enum_2eproto::offsets,
    nullptr, file_level_enum_descriptors_Enum_2eproto,
    file_level_service_descriptors_Enum_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Enum_2eproto_getter() {
  return &descriptor_table_Enum_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Enum_2eproto(&descriptor_table_Enum_2eproto);
namespace Protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObjectType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[0];
}
bool ObjectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreatureType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[1];
}
bool CreatureType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreatureState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[2];
}
bool CreatureState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LevelType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[3];
}
bool LevelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AttackType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[4];
}
bool AttackType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[5];
}
bool ItemType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParticleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[6];
}
bool ParticleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AnimationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Enum_2eproto);
  return file_level_enum_descriptors_Enum_2eproto[7];
}
bool AnimationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
