// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Enum.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Enum_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Enum_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Enum_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

enum ObjectType : int {
  OBJECT_TYPE_NONE = 0,
  OBJECT_TYPE_CREATURE = 1,
  OBJECT_TYPE_PROJECTILE = 2,
  OBJECT_TYPE_ITEM = 3,
  OBJECT_TYPE_COUNT = 4,
  ObjectType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ObjectType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ObjectType_IsValid(int value);
constexpr ObjectType ObjectType_MIN = OBJECT_TYPE_NONE;
constexpr ObjectType ObjectType_MAX = OBJECT_TYPE_COUNT;
constexpr int ObjectType_ARRAYSIZE = ObjectType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObjectType_descriptor();
template<typename T>
inline const std::string& ObjectType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObjectType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObjectType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObjectType_descriptor(), enum_t_value);
}
inline bool ObjectType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ObjectType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObjectType>(
    ObjectType_descriptor(), name, value);
}
enum CreatureType : int {
  CREATURE_TYPE_NONE = 0,
  CREATURE_TYPE_PLAYER_MAGE = 1,
  CREATURE_TYPE_PLAYER_WARRIOR = 2,
  CREATURE_TYPE_PLAYER_ROG = 3,
  CREATURE_TYPE_MONSTER_IGGY = 4,
  CREATURE_TYPE_MONSTER_BOSS_NAME_UNKNOWN = 5,
  CREATURE_TYPE_COUNT = 6,
  CreatureType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CreatureType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CreatureType_IsValid(int value);
constexpr CreatureType CreatureType_MIN = CREATURE_TYPE_NONE;
constexpr CreatureType CreatureType_MAX = CREATURE_TYPE_COUNT;
constexpr int CreatureType_ARRAYSIZE = CreatureType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreatureType_descriptor();
template<typename T>
inline const std::string& CreatureType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CreatureType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CreatureType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CreatureType_descriptor(), enum_t_value);
}
inline bool CreatureType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CreatureType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CreatureType>(
    CreatureType_descriptor(), name, value);
}
enum CreatureState : int {
  CREATURE_STATE_NONE = 0,
  CREATURE_STATE_IDLE = 1,
  CREATURE_STATE_MOVE = 2,
  CREATURE_STATE_NORMAR_ATTACK = 3,
  CREATURE_STATE_HIT_REACT = 4,
  CREATURE_STATE_SKILL_ATTACK = 5,
  CREATURE_STATE_COUNT = 6,
  CreatureState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CreatureState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CreatureState_IsValid(int value);
constexpr CreatureState CreatureState_MIN = CREATURE_STATE_NONE;
constexpr CreatureState CreatureState_MAX = CREATURE_STATE_COUNT;
constexpr int CreatureState_ARRAYSIZE = CreatureState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreatureState_descriptor();
template<typename T>
inline const std::string& CreatureState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CreatureState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CreatureState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CreatureState_descriptor(), enum_t_value);
}
inline bool CreatureState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CreatureState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CreatureState>(
    CreatureState_descriptor(), name, value);
}
enum LevelType : int {
  LEVEL_TYPE_NONE = 0,
  LEVEL_TYPE_START_BRIDGE = 1,
  LEVEL_TYPE_CASTLE_FRONT_YARD = 2,
  LEVEL_TYPE_COUNT = 3,
  LevelType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LevelType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LevelType_IsValid(int value);
constexpr LevelType LevelType_MIN = LEVEL_TYPE_NONE;
constexpr LevelType LevelType_MAX = LEVEL_TYPE_COUNT;
constexpr int LevelType_ARRAYSIZE = LevelType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LevelType_descriptor();
template<typename T>
inline const std::string& LevelType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LevelType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LevelType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LevelType_descriptor(), enum_t_value);
}
inline bool LevelType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LevelType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LevelType>(
    LevelType_descriptor(), name, value);
}
enum AttackType : int {
  ATTACK_TYPE_NONE = 0,
  ATTACK_TYPE_NORMAL_ATTACK = 1,
  ATTACK_TYPE_SKILL_MAGE = 2,
  ATTACK_TYPE_SKILL_WARRIOR = 3,
  ATTACK_TYPE_SKILL_ROG = 4,
  ATTACK_TYPE_COUNT = 5,
  AttackType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AttackType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AttackType_IsValid(int value);
constexpr AttackType AttackType_MIN = ATTACK_TYPE_NONE;
constexpr AttackType AttackType_MAX = ATTACK_TYPE_COUNT;
constexpr int AttackType_ARRAYSIZE = AttackType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AttackType_descriptor();
template<typename T>
inline const std::string& AttackType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AttackType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AttackType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AttackType_descriptor(), enum_t_value);
}
inline bool AttackType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AttackType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AttackType>(
    AttackType_descriptor(), name, value);
}
enum ItemType : int {
  ITEM_TYPE_NONE = 0,
  ITEM_TYPE_HP_PORTION = 1,
  ITEM_TYPE_LARGE_HP_PORTION = 2,
  ITEM_TYPE_COUNT = 3,
  ItemType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ItemType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ItemType_IsValid(int value);
constexpr ItemType ItemType_MIN = ITEM_TYPE_NONE;
constexpr ItemType ItemType_MAX = ITEM_TYPE_COUNT;
constexpr int ItemType_ARRAYSIZE = ItemType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemType_descriptor();
template<typename T>
inline const std::string& ItemType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ItemType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ItemType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ItemType_descriptor(), enum_t_value);
}
inline bool ItemType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ItemType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ItemType>(
    ItemType_descriptor(), name, value);
}
enum ParticleType : int {
  PARTICLE_TYPE_NONE = 0,
  PARTICLE_TYPE_MAGIC_ZONE = 1,
  PARTICLE_TYPE_METEO = 2,
  PARTICLE_TYPE_BLINK = 3,
  PARTICLE_TYPE_COUNT = 4,
  ParticleType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ParticleType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ParticleType_IsValid(int value);
constexpr ParticleType ParticleType_MIN = PARTICLE_TYPE_NONE;
constexpr ParticleType ParticleType_MAX = PARTICLE_TYPE_COUNT;
constexpr int ParticleType_ARRAYSIZE = ParticleType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParticleType_descriptor();
template<typename T>
inline const std::string& ParticleType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ParticleType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ParticleType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ParticleType_descriptor(), enum_t_value);
}
inline bool ParticleType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ParticleType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ParticleType>(
    ParticleType_descriptor(), name, value);
}
enum AnimationType : int {
  ANI_TYPE_NONE = 0,
  ANI_TYPE_NORMAL_ATTACK = 1,
  ANI_TYPE_SKILL = 2,
  ANI_TYPE_DAMAGED = 3,
  ANI_TYPE_DEATH = 4,
  ANI_TYPE_COUNT = 5,
  AnimationType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AnimationType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AnimationType_IsValid(int value);
constexpr AnimationType AnimationType_MIN = ANI_TYPE_NONE;
constexpr AnimationType AnimationType_MAX = ANI_TYPE_COUNT;
constexpr int AnimationType_ARRAYSIZE = AnimationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AnimationType_descriptor();
template<typename T>
inline const std::string& AnimationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AnimationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AnimationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AnimationType_descriptor(), enum_t_value);
}
inline bool AnimationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AnimationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AnimationType>(
    AnimationType_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Protocol::ObjectType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::ObjectType>() {
  return ::Protocol::ObjectType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::CreatureType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::CreatureType>() {
  return ::Protocol::CreatureType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::CreatureState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::CreatureState>() {
  return ::Protocol::CreatureState_descriptor();
}
template <> struct is_proto_enum< ::Protocol::LevelType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::LevelType>() {
  return ::Protocol::LevelType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::AttackType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::AttackType>() {
  return ::Protocol::AttackType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::ItemType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::ItemType>() {
  return ::Protocol::ItemType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::ParticleType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::ParticleType>() {
  return ::Protocol::ParticleType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::AnimationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::AnimationType>() {
  return ::Protocol::AnimationType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto
